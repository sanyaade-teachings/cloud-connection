/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.3
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#include "CloudConnectionPluginPCH.hpp"
#include <Vision/Runtime/EnginePlugins/VisionEnginePlugin/Scripting/VScriptIncludes.hpp>

#ifndef _VISION_DOC

#if defined (__SNC__)
#pragma diag_push
#pragma diag_suppress=112
#pragma diag_push
#pragma diag_suppress=178
#pragma diag_push
#pragma diag_suppress=1111
#endif

#if defined(__ghs__)
#pragma ghs nowarning 1795
#pragma ghs nowarning 111
#pragma ghs nowarning 177
#endif

#define SWIGLUA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
  VType                  *visiontype; // Vision extension
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */
 
#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */
 
// Note: this is not called from SWIG_Lua_class_get since dynamic properties are accessed directly by lua,
// but it's implemented to allow access from native
SWIGINTERN void VisionLuaClassGet(lua_State *L)
{
  // Fetch the meta table and the __index field
  lua_getmetatable(L, 1);                                                     // userdata, key, ..., perinstancetable or perclasstable, TOP
  lua_getfield(L, -1, "__index");                                             // userdata, key, ..., perinstancetable or perclasstable, index, TOP

  // If there is no perinstance table, push nil
  if (!lua_equal(L, -1, -2))
  {
    lua_pop(L, 2);                                                            // userdata, key, ..., TOP
    lua_pushnil(L);                                                           // userdata, key, ..., nil, TOP
    return;
  }

  lua_pop(L, 1);                                                            // userdata, key, ..., perinstancetable, TOP
  
  // Now fetch the value from the per-instance table
  lua_pushvalue(L, 2);                                                      // userdata, key, ..., perinstancetable, key, TOP
  lua_rawget(L, -2);                                                        // userdata, key, ..., perinstancetable, value, TOP
  lua_remove(L, -2);                                                        // userdata, key, ..., value, TOP
}
 
/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/

  // Vision extension: In case the first argument is a table and not the userdata,
  // then the table is the per-instance metatable. Recover the userdata and its
  // per-class metatable from the "__visionwrapper" field in the per-instance table.
  if (lua_istable(L, 1))
  {
    lua_pushvalue(L, 1);                    // perinstancetable, key, perinstancetable, TOP
    lua_getfield(L, 1, "__visionwrapper");  // perinstancetable, key, perinstancetable, userdata, TOP
    assert(!lua_isnil(L, -1));
    lua_replace(L, 1);                      // userdata, key, perinstancetable, TOP
    lua_getmetatable(L, -1);                // userdata, key, perinstancetable, perclasstable, TOP
    lua_remove(L, -2);                      // userdata, key, perclasstable, TOP
  }
  else
  {
    assert(lua_isuserdata(L, 1));  /* just in case */
    lua_getmetatable(L, 1);    /* get the meta table */
  }

  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  
  return 0;  /* sorry not known */
}

//Expecting the same stack format as SWIG:
//stack: userdata, key, value, ..., TOP
SWIGINTERN void VisionLuaClassSet(lua_State *L)
{
  // Fetch the meta table and the __index field
  lua_getmetatable(L, 1);                                                     // userdata, key, value, ..., perinstancetable or perclasstable, TOP
  lua_getfield(L, -1, "__index");                                             // userdata, key, value, ..., perinstancetable or perclasstable, index, TOP

  // If the __index field points back to the table, it must be a per-instance table. If not, create one.
  if (!lua_equal(L, -1, -2))
  {
    lua_pop(L, 1);                                                            // userdata, key, value, ..., perclasstable, TOP

    // Create new metatable
    lua_newtable(L);                                                          // userdata, key, value, ..., perclasstable, perinstancetable, TOP

    // __visionwrapper points to the userdata
    lua_pushvalue(L, 1);                                                      // userdata, key, value, ..., perclasstable, perinstancetable, userdata, TOP
    lua_setfield(L, -2, "__visionwrapper");                                   // userdata, key, value, ..., perclasstable, perinstancetable, TOP

    // __index and __newindex point to the table itself
    // That way, accessing keys can be performed using the per-instance table without having to call a native function.
    lua_pushvalue(L, -1);                                                     // userdata, key, value, ..., perclasstable, perinstancetable, newmetatable, TOP
    lua_setfield(L, -2, "__index");                                           // userdata, key, value, ..., perclasstable, perinstancetable, TOP

    lua_pushvalue(L, -1);                                                     // userdata, key, value, ..., perclasstable, perinstancetable, newmetatable, TOP
    lua_setfield(L, -2, "__newindex");                                        // userdata, key, value, ..., perclasstable, perinstancetable, TOP

    // Set the original metatable as the metatable of the new one so that we can fallback to the per-class table
    lua_pushvalue(L, -2);                                                     // userdata, key, value, ..., perclasstable, perinstancetable, metatable, TOP
    lua_setmetatable(L, -2);                                                  // userdata, key, value, ..., perclasstable, perinstancetable, TOP
    lua_pushvalue(L, -1);                                                     // userdata, key, value, ..., perclasstable, perinstancetable, newmetatable, TOP

    // Set the per-instance table as the meta table of the userdata
    lua_setmetatable(L, 1);                                                   // userdata, key, value, ..., perclasstable, perinstancetable, TOP

    lua_remove(L, -2);                                                        // userdata, key, value, ..., perinstancetable, TOP
  }

  // Now set the value in the per-isntance table
  lua_pushvalue(L, 2);                                                      // userdata, key, value, ..., perinstancetable, key, TOP
  lua_pushvalue(L, 3);                                                      // userdata, key, value, ..., perinstancetable, key, value, TOP
  lua_rawset(L, -3);                                                        // userdata, key, value, ..., perinstancetable, TOP
  lua_pop(L, 1);                                                            // userdata, key, value, ..., TOP
} 

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value  
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3))); */

  // Vision extension: In case the first argument is a table and not the userdata,
  // then the table is the per-instance metatable. Recover the userdata and its
  // per-class metatable from the "__visionwrapper" field in the per-instance table.
  if (lua_istable(L, 1))
  {
    lua_pushvalue(L, 1);                    // perinstancetable, key, value, perinstancetable, TOP
    lua_getfield(L, 1, "__visionwrapper");  // perinstancetable, key, value, perinstancetable, userdata, TOP
    assert(!lua_isnil(L, -1));
    lua_replace(L, 1);                      // userdata, key, value, perinstancetable, TOP
    lua_getmetatable(L, -1);                // userdata, key, value, perinstancetable, perclasstable, TOP
    lua_remove(L, -2);                      // userdata, key, value, perclasstable, TOP
  }
  else
  {
    assert(lua_isuserdata(L, 1));  /* just in case */
    lua_getmetatable(L, 1);    /* get the meta table */
  }

  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  
  //////////////////////
  // Vision Extension //

  VisionLuaClassSet(L); 

  // End of Extension //
  //////////////////////

  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
  } 
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

#ifdef __cplusplus
}
#endif

/* pushes a new object into the lua stack by copying the value into the userdata object */
template<typename T>
SWIGRUNTIME void SWIG_Lua_NewPodObj(lua_State* L, const T* ptr, swig_type_info *type)
{
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  
  struct value_user_data
  {
    swig_lua_userdata swigdata;
    T object;
  };
  
  value_user_data* usr = (value_user_data*) lua_newuserdata(L, sizeof(value_user_data));
  
  // Make sure that the swig_lua_userdata is at offset 0 of the extended user data
  V_COMPILE_ASSERT(offsetof(value_user_data, swigdata) == 0);
  
  usr->object = *ptr;
  usr->swigdata.ptr = &usr->object;
  usr->swigdata.type = type;
  usr->swigdata.own = 0;
  _SWIG_Lua_AddMetatable(L, type); /* add metatable */
}

#ifdef __cplusplus
extern "C" {
#endif

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
    usr->type=type;
    usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
 
    if(usr->ptr == NULL)
    {
      *ptr=0;
      return SWIG_OK;
    }
    
    // Vision extension: handle cast manually using our own RTTI - no need for virtual function calls
    if(type->visiontype != NULL && usr->type->visiontype != NULL)
    {
      // SWIG only needs to cast to a less derived type, since the proxy object already has the most derived type
      if(type->visiontype == usr->type->visiontype || usr->type->visiontype->IsDerivedFrom(type->visiontype))
      {
        *ptr = VType::CastFromTo(usr->ptr, usr->type->visiontype, type->visiontype);
        return SWIG_OK;
      }
      else
      {
        return SWIG_ERROR;
      }
    }
    else
    {
      cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
      if (cast)
      {
        int newmemory = 0;
        *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
        return SWIG_OK;  /* ok */
      }
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
        return usr->type->str;
      return "userdata (unknown type)";
    }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata * usr1, *usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1 = (swig_lua_userdata*)lua_touserdata(L, 1); /* get data */
  usr2 = (swig_lua_userdata*)lua_touserdata(L, 2); /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
  lua_pushboolean(L,result);
  return 1;
}

// Vision extension: check if weak pointer points to a live object
SWIGRUNTIME int SWIG_Lua_isalive(lua_State* L)
{
  int result;
  swig_lua_userdata * usr1;
  
  if(lua_isuserdata(L, 1))
  {
    usr1 = (swig_lua_userdata*)lua_touserdata(L, 1);
    result = (usr1->ptr != NULL);
  }
  else if(lua_isnil(L, 1))
  {
    result = 0;
  }
  else
  {
    return 0;
  }
    
  lua_pushboolean(L, result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CCAchievement swig_types[0]
#define SWIGTYPE_p_CloudConnection swig_types[1]
#define SWIGTYPE_p_CloudConnectionClient swig_types[2]
#define SWIGTYPE_p_IVObjectComponent swig_types[3]
#define SWIGTYPE_p_VBitmask swig_types[4]
#define SWIGTYPE_p_VCaptureSwigEnvironment swig_types[5]
#define SWIGTYPE_p_VColorRef swig_types[6]
#define SWIGTYPE_p_VDynamicMesh swig_types[7]
#define SWIGTYPE_p_VMapT_VString_VString_t swig_types[8]
#define SWIGTYPE_p_VScriptInstance swig_types[9]
#define SWIGTYPE_p_VTextureObject swig_types[10]
#define SWIGTYPE_p_VTypedObject swig_types[11]
#define SWIGTYPE_p_VisBaseEntity_cl swig_types[12]
#define SWIGTYPE_p_VisObject3D_cl swig_types[13]
#define SWIGTYPE_p_VisObjectKey_cl swig_types[14]
#define SWIGTYPE_p_VisSurface_cl swig_types[15]
#define SWIGTYPE_p_VisTypedEngineObject_cl swig_types[16]
#define SWIGTYPE_p___int64 swig_types[17]
#define SWIGTYPE_p_char swig_types[18]
#define SWIGTYPE_p_float swig_types[19]
#define SWIGTYPE_p_hkvAlignedBBox swig_types[20]
#define SWIGTYPE_p_hkvBoundingSphere swig_types[21]
#define SWIGTYPE_p_hkvMat3 swig_types[22]
#define SWIGTYPE_p_hkvMat4 swig_types[23]
#define SWIGTYPE_p_hkvPlane swig_types[24]
#define SWIGTYPE_p_hkvQuat swig_types[25]
#define SWIGTYPE_p_hkvVec2 swig_types[26]
#define SWIGTYPE_p_hkvVec3 swig_types[27]
#define SWIGTYPE_p_hkvVec4 swig_types[28]
#define SWIGTYPE_p_int swig_types[29]
#define SWIGTYPE_p_long swig_types[30]
#define SWIGTYPE_p_p_char swig_types[31]
#define SWIGTYPE_p_p_unsigned_long swig_types[32]
#define SWIGTYPE_p_short swig_types[33]
#define SWIGTYPE_p_signed___int64 swig_types[34]
#define SWIGTYPE_p_signed_char swig_types[35]
#define SWIGTYPE_p_unsigned___int64 swig_types[36]
#define SWIGTYPE_p_unsigned_char swig_types[37]
#define SWIGTYPE_p_unsigned_int swig_types[38]
#define SWIGTYPE_p_unsigned_long swig_types[39]
#define SWIGTYPE_p_unsigned_short swig_types[40]
static swig_type_info *swig_types[42];
static swig_module_info swig_module = {swig_types, 41, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "CloudConnectionLuaModule"
#define SWIG_init      luaopen_CloudConnectionLuaModule
#define SWIG_init_user luaopen_CloudConnectionLuaModule_user

#define SWIG_LUACODE   luaopen_CloudConnectionLuaModule_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


  // Redefine SWIG_fail_* macros to make them display file and line information
  // See http://stackoverflow.com/questions/14664541/line-number-where-swig-runtimeerror-occurs
  SWIGRUNTIME void SWIG_push_fail_arg_info(lua_State* L, const char* func_name, int argnum, const char* expected, const char* actual)
  {
    lua_Debug ar;
    lua_getstack(L, 1, &ar);
    lua_getinfo(L, "nSl", &ar);
    lua_pushfstring(L,"Error (%s:%d) in %s (arg %d), expected '%s' got '%s'", ar.source,ar.currentline,func_name,argnum,expected,actual);
  }
  
  SWIGRUNTIME void SWIG_push_fail_check_num_args_info(lua_State* L, const char* func_name, int a, int b, int c)
  {
    lua_Debug ar;
    lua_getstack(L, 1, &ar);
    lua_getinfo(L, "nSl", &ar);
    lua_pushfstring(L,"Error (%s:%d) in %s expected %d..%d args, got %d",ar.source,ar.currentline,func_name,a,b,lua_gettop(L));
  }
  
  #undef SWIG_fail_arg
  #define SWIG_fail_arg(func_name,argnum,type) \
    {SWIG_push_fail_arg_info(L,func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
    goto fail;}
  
  #undef SWIG_check_num_args
  #define SWIG_check_num_args(func_name,a,b) \
    if (lua_gettop(L)<a || lua_gettop(L)>b) \
    { SWIG_push_fail_check_num_args_info(L,func_name,a,b,lua_gettop(L));\
    goto fail;}

SWIGINTERN VColorRef *new_VColorRef__SWIG_3(VColorRef const &other){
      return new VColorRef(other.r, other.g, other.b, other.a);
    }
SWIGINTERN VColorRef VColorRef_Clone(VColorRef *self){
      return VColorRef(self->r, self->g, self->b, self->a);
    }
SWIGINTERN VColorRef VColorRef_clone(VColorRef *self){
      return VColorRef(self->r, self->g, self->b, self->a);
    }

  SWIGINTERN int VColorRef_Concat(lua_State *L)
  {
    //this will move this function to the method table of the specified class
    
    bool ARGS_OK = true;
    
    const char *pszString = NULL;
    int iIndex = -1;
    
    //The concat operator allows "foo"..self and self.."bar" so that
    //we have to consider self as first and as second stack element.
    
    //handle string as first (top) element
    if(lua_isstring(L,iIndex))
    {
      pszString = lua_tostring(L,iIndex);
      iIndex--;
    }
    
    SWIG_CONVERT_POINTER(L, iIndex, VColorRef, self)
    iIndex--;
    
    //handle string as second element
    if(iIndex==-2)
    {
      pszString = lua_tostring(L,iIndex);
    }
        
    unsigned int uiLen = (unsigned int) strlen(pszString);
    char *pszBuffer = new char[uiLen+32];
   
    sprintf(pszBuffer, "[%d,%d,%d,%d]",self->r,self->g,self->b,self->a); //format as requested
    
    //the new buffer should have the size of the old string and the new format string
    VASSERT_MSG(32>(strlen(pszBuffer)+uiLen), "Please increase your temp buffer size!");
    
    //append or prepend old buffer buffer (depending on the position inside the lua stack)
    if(iIndex==-3) //append old string
    {
      memcpy(pszBuffer+strlen(pszBuffer),pszString,uiLen+1); //also copy the terminator at the end
    }
    else //prepend old string
    {
      memmove(pszBuffer+uiLen,pszBuffer, strlen(pszBuffer)+1); //also move the terminator at the end
      memcpy(pszBuffer,pszString,uiLen); //insert the old string
    }

    lua_pushstring(L, pszBuffer);
  
    V_SAFE_DELETE_ARRAY(pszBuffer);

    return 1;
  }


  SWIGINTERN int VColorRef_ToString(lua_State *L)
  {
    //this will move this function to the method table of the specified class
    
    SWIG_CONVERT_POINTER(L, -1, VColorRef, self)
    
    char pszBuffer[1024];
    
    sprintf(pszBuffer, "VColorRef: R %d, G %d, B %d, A %d",self->r,self->g,self->b,self->a); //format as requested
      
    lua_pushstring(L, pszBuffer);
    
    return 1;
  }



// A helper class that binds to an arbitrary Lua value as a function argument. Currently only used by VTypedObject::SetProperty
class VLuaStackRef
{
public:
  /// \brief Constructor. Internal, do not use.
  VLuaStackRef(hkvInit_None) {}

  /// \brief Constructor. Internal, do not use.
  VLuaStackRef(lua_State* L, int iStackIndex) : L(L)
  {
    // Make stack index absolute so it's not invalidated by pushing something else onto the stack
    m_iStackIndex = (iStackIndex > 0 || iStackIndex <= LUA_REGISTRYINDEX) ? iStackIndex : lua_gettop(L) + iStackIndex + 1;
  }

  /// \brief Converts the Lua value to a boolean.
  bool ToBoolean() const
  {
    return lua_toboolean(L, m_iStackIndex) == 1;
  }

  /// \brief Converts the Lua value to an integer.
  lua_Integer ToInteger() const
  {
    return lua_tointeger(L, m_iStackIndex);
  }

  /// \brief Converts the Lua value to a number.
  lua_Number ToNumber() const
  {
    return lua_tonumber(L, m_iStackIndex);
  }

  /// \brief Converts the Lua value to a string.
  const char* ToString() const
  {
    return lua_tostring(L, m_iStackIndex);
  }

  /// \brief Converts the Lua value to an object pointer. Caution, no type check is currently performed.
  template<typename T> const T* ToObject() const
  {
    if(swig_lua_userdata* usr = (swig_lua_userdata*) lua_touserdata(L, m_iStackIndex))
    {
      return static_cast<T*>(usr->ptr);
    }

    return NULL;
  }

private:
  lua_State* L;
  int m_iStackIndex;
};


SWIGINTERN char const *VTypedObject_GetType(VTypedObject const *self){
      return self->GetTypeId()->m_lpszClassName;
    }

SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

SWIGINTERN bool VTypedObject_IsOfType(VTypedObject *self,char const *szType){
      return self->IsOfType(szType) == TRUE;
    }
SWIGINTERN char const *VTypedObject_GetPropertyType(VTypedObject *self,char const *propName){
      if(propName == NULL)
        return NULL; // avoid problems with nil values
      VisVariable_cl* pVar = self->GetVariable(propName);
      int type = pVar ? pVar->type : -1;
      switch (type) {
      case VULPTYPE_STRING:
      case VULPTYPE_VSTRING:
      case VULPTYPE_MODEL:
      case VULPTYPE_PSTRING:
      case VULPTYPE_ENTITY_KEY:
      case VULPTYPE_PRIMITIVE_KEY:
      case VULPTYPE_VERTEX_KEY:
      case VULPTYPE_LIGHTSOURCE_KEY:
      case VULPTYPE_WORLDANIMATION_KEY:
      case VULPTYPE_PATH_KEY:
        return "string";
      case VULPTYPE_ENUM:
      case VULPTYPE_INT:
      case VULPTYPE_FLOAT:
      case VULPTYPE_DOUBLE:
        return "number";
      case VULPTYPE_BOOL:
        return "boolean";
      case VULPTYPE_VECTOR_INT:
      case VULPTYPE_VECTOR_FLOAT:
      case VULPTYPE_VECTOR_DOUBLE:
        return "hkvVec3";
      case VULPTYPE_BYTE_COLOR4:
        return "VColorRef";
      default:
        hkvLog::Warning("Type of property '%s' is unknown in Lua.", propName);
        return NULL;
      }
    }
SWIGINTERN bool VTypedObject_operator_Se__Se_(VTypedObject *self,VTypedObject const &other){
      return self == &other;
    }
SWIGINTERN void VTypedObject_GetProperty(VTypedObject *self,char const *pszName,VCaptureSwigEnvironment *env){
      VisVariable_cl* pVar = self->GetVariable(pszName);
      if(!pVar)
      {
        hkvLog::Warning("Called getter of unknown property '%s'", pszName);
        env->AddReturnValueNil();
        return;
      }
      
      switch(pVar->type)
      {
      case VULPTYPE_STRING:
      case VULPTYPE_MODEL:
      case VULPTYPE_PSTRING:
      case VULPTYPE_ENTITY_KEY:
      case VULPTYPE_PRIMITIVE_KEY:
      case VULPTYPE_VERTEX_KEY:
      case VULPTYPE_LIGHTSOURCE_KEY:
      case VULPTYPE_WORLDANIMATION_KEY:
      case VULPTYPE_PATH_KEY:
      {
        const char* pStr = NULL;
        pVar->GetValueDirect(self, (void*) &pStr, true);
        env->AddReturnValueString(pStr);
      }
      break;
      case VULPTYPE_VSTRING:
      {
        VString vstr;
        pVar->GetValueDirect(self, (void*) &vstr, true);
        env->AddReturnValueString(vstr.AsChar());
      }
      break;
      case VULPTYPE_ENUM:
      case VULPTYPE_INT:
      {
        int n;
        pVar->GetValueDirect(self, (void*) &n, true);
        env->AddReturnValueNumber((lua_Number)n);
      }
      break;
      case VULPTYPE_FLOAT:
      {
        float n;
        pVar->GetValueDirect(self, (void*) &n, true);
        env->AddReturnValueNumber((lua_Number)n);
      }
      break;
      case VULPTYPE_DOUBLE:
      {
        double n;
        pVar->GetValueDirect(self, (void*) &n, true);
        env->AddReturnValueNumber((lua_Number)n);
      }
      break;
      case VULPTYPE_BOOL:
      {
        BOOL b;
        pVar->GetValueDirect(self, (void*) &b, true);
        env->AddReturnValueBool(b != 0);
      }
      break;
      case VULPTYPE_VECTOR_INT:
      {
        int pN[3];
        pVar->GetValueDirect(self, (void*) pN, true);
        hkvVec3 vector((float)pN[0], (float)pN[1], (float)pN[2]);
        SWIG_Lua_NewPodObj(env->GetLuaState(), &vector, SWIGTYPE_p_hkvVec3);
        env->SetNumReturnValues(1);
      }
      break;
      case VULPTYPE_VECTOR_FLOAT:
      {
        float pN[3];
        pVar->GetValueDirect(self, (void*) pN, true);
        hkvVec3 vector(pN[0], pN[1], pN[2]);
        SWIG_Lua_NewPodObj(env->GetLuaState(), &vector, SWIGTYPE_p_hkvVec3);
        env->SetNumReturnValues(1);
      }
      break;
      case VULPTYPE_VECTOR_DOUBLE:
      {
        double pN[3];
        pVar->GetValueDirect(self, (void*) pN, true);
        hkvVec3 vector((float)pN[0], (float)pN[1], (float)pN[2]);
        SWIG_Lua_NewPodObj(env->GetLuaState(), &vector, SWIGTYPE_p_hkvVec3);
        env->SetNumReturnValues(1);
      }
      break;
      case VULPTYPE_BYTE_COLOR4:
      {
        VColorRef color;
        pVar->GetValueDirect(self, (void*) &color, true);
        SWIG_Lua_NewPodObj(env->GetLuaState(), &color, SWIGTYPE_p_VColorRef);
        env->SetNumReturnValues(1);
      }
      break;
      default:
        hkvLog::Warning("Called getter of unknown type %d (%s)", pVar->type, pszName);
        env->AddReturnValueNil();
        break;
      }
    }
SWIGINTERN void VTypedObject_GetProperties(VTypedObject *self,VCaptureSwigEnvironment *env){
      lua_State* L = env->GetLuaState();
      
      int iCount = self->GetNumVariables();
      
      lua_createtable(L, iCount, 0); //create an empty table (or an array if you would like to see it this way)
      
      env->SetNumReturnValues(1);
      
      for(int i = 0; i < iCount; ++i)
      {
        const char* szName = self->GetVariableName(i);
        
        lua_createtable(L, 0, 2);    // create a new sub table             stack: table, table, TOP
        lua_pushstring(L, "Name");   // push the key                       stack: table, table, key, TOP
        lua_pushstring(L, szName);   // push the value                     stack: table, table, key, value, TOP
        lua_settable(L, -3);         // set key and value as entry         stack: table, table, TOP
        
        lua_pushstring(L, "Type");   // push the key                       stack: table, table, key, TOP
        
        switch(self->GetVariable(szName)->type)
        {
        case VULPTYPE_STRING:
        case VULPTYPE_VSTRING:
        case VULPTYPE_MODEL:
        case VULPTYPE_PSTRING:
        case VULPTYPE_ENTITY_KEY:
        case VULPTYPE_PRIMITIVE_KEY:
        case VULPTYPE_VERTEX_KEY:
        case VULPTYPE_LIGHTSOURCE_KEY:
        case VULPTYPE_WORLDANIMATION_KEY:
        case VULPTYPE_PATH_KEY:
          lua_pushstring(L, "string");
          break;
        case VULPTYPE_ENUM:
        case VULPTYPE_INT:
        case VULPTYPE_FLOAT:
        case VULPTYPE_DOUBLE:
          lua_pushstring(L, "number");
          break;
        case VULPTYPE_BOOL:
          lua_pushstring(L, "boolean");
          break;
        case VULPTYPE_VECTOR_INT:
        case VULPTYPE_VECTOR_FLOAT:
        case VULPTYPE_VECTOR_DOUBLE:
          lua_pushstring(L, "hkvVec3");
          break;
        case VULPTYPE_BYTE_COLOR4:
          lua_pushstring(L, "VColorRef");
          break;
        default:
          lua_pushstring(L, "unknown");
          break;
        }
        //after switch:                                                 stack: table, table, key, value, TOP
        
        lua_settable(L, -3);      //set key and value as entry          stack: table, table, TOP
        lua_rawseti(L, -2, i + 1); //add to overall table                stack: table, TOP
      }
    }
SWIGINTERN void VTypedObject_SetProperty(VTypedObject *self,char const *pszName,VLuaStackRef const &value,VCaptureSwigEnvironment *env){
      VisVariable_cl* pVar = self->GetVariable(pszName);
      
      // if variable can't be found by name try with display name
      if(!pVar)
        pVar = self->GetVariableByDisplayName(pszName);
        
      if(!pVar)
      {
        hkvLog::Warning("Called setter of unknown property '%s'", pszName);
        return;
      }

      lua_State* L = env->GetLuaState();
      
      VVarChangeRes_e result = self->OnVariableValueChanging(pVar, pszName);
      if(result == VCHANGE_IS_ALLOWED)
      {
        switch(pVar->type)
        {
        case VULPTYPE_STRING:
        case VULPTYPE_VSTRING:
        case VULPTYPE_MODEL:
        case VULPTYPE_PSTRING:
        case VULPTYPE_ENTITY_KEY:
        case VULPTYPE_PRIMITIVE_KEY:
        case VULPTYPE_VERTEX_KEY:
        case VULPTYPE_LIGHTSOURCE_KEY:
        case VULPTYPE_WORLDANIMATION_KEY:
        case VULPTYPE_PATH_KEY:
        {
          const char* pszVal = value.ToString();
          pVar->SetValue(self, pszVal, true);
        }
        break;
        case VULPTYPE_ENUM:
        case VULPTYPE_INT:
        {
          int i = (int) value.ToNumber();
          pVar->SetValueDirect(self, (void*) &i, true);
        }
        break;
        case VULPTYPE_FLOAT:
        {
          float f = (float) value.ToNumber();
          pVar->SetValueDirect(self, (void*) &f, true);
        }
        break;
        case VULPTYPE_DOUBLE:
        {
          double d = (double) value.ToNumber();
          pVar->SetValueDirect(self, (void*) &d, true);
        }
        break;
        case VULPTYPE_BOOL:
        {
          BOOL b = (BOOL) value.ToBoolean();
          pVar->SetValueDirect(self, (void*) &b, true);
        }
        break;
        case VULPTYPE_VECTOR_INT:
        {
          const hkvVec3* pVec = value.ToObject<hkvVec3>();

          if(!pVec)
          {
            env->Fail("Expected argument of type hkvVec3");
            return;
          }

          int pI[3] = {(int) pVec->x, (int) pVec->y, (int) pVec->z};
          pVar->SetValueDirect(self, (void*) pI, true);
        }
        break;
        case VULPTYPE_VECTOR_FLOAT:
        {
          const hkvVec3* pVec = value.ToObject<hkvVec3>();

          if(!pVec)
          {
            env->Fail("Expected argument of type hkvVec3");
            return;
          }

          float pF[3] = {pVec->x, pVec->y, pVec->z};
          pVar->SetValueDirect(self, (void*) pF, true);
        }
        break;
        case VULPTYPE_VECTOR_DOUBLE:
        {
          const hkvVec3* pVec = value.ToObject<hkvVec3>();

          if(!pVec)
          {
            env->Fail("Expected argument of type hkvVec3");
            return;
          }

          double pD[3] = {(double) pVec->x, (double) pVec->y, (double) pVec->z};
          pVar->SetValueDirect(self, (void*) pD, true);
        }
        break;
        case VULPTYPE_BYTE_COLOR4:
        {
          const VColorRef* pColor = value.ToObject<VColorRef>();

          if(!pColor)
          {
            env->Fail("Expected argument of type VColorRef");
            return;
          }

          pVar->SetValueDirect(self, (void*) pColor, true);
        }
        default:
          hkvLog::Warning("Called setter of unknown type %d (%s)", pVar->type, pszName);
          break;
        }
        self->OnVariableValueChanging(pVar, pszName);
      }
    }

  SWIGINTERN int VTypedObject_Concat(lua_State *L)
  {
    //this will move this function to the method table of the specified class
    
    bool ARGS_OK = true;
    
    const char *pszString = NULL;
    int iIndex = -1;
    
    //The concat operator allows "foo"..self and self.."bar" so that
    //we have to consider self as first and as second stack element.
    
    //handle string as first (top) element
    if(lua_isstring(L,iIndex))
    {
      pszString = lua_tostring(L,iIndex);
      iIndex--;
    }
    
    SWIG_CONVERT_POINTER(L, iIndex, VTypedObject, self)
    iIndex--;
    
    //handle string as second element
    if(iIndex==-2)
    {
      pszString = lua_tostring(L,iIndex);
    }
        
    unsigned int uiLen = (unsigned int) strlen(pszString);
    char *pszBuffer = new char[uiLen+128];
   
    sprintf(pszBuffer, "%s",self->GetClassTypeId()->m_lpszClassName); //format as requested
    
    //the new buffer should have the size of the old string and the new format string
    VASSERT_MSG(128>(strlen(pszBuffer)+uiLen), "Please increase your temp buffer size!");
    
    //append or prepend old buffer buffer (depending on the position inside the lua stack)
    if(iIndex==-3) //append old string
    {
      memcpy(pszBuffer+strlen(pszBuffer),pszString,uiLen+1); //also copy the terminator at the end
    }
    else //prepend old string
    {
      memmove(pszBuffer+uiLen,pszBuffer, strlen(pszBuffer)+1); //also move the terminator at the end
      memcpy(pszBuffer,pszString,uiLen); //insert the old string
    }

    lua_pushstring(L, pszBuffer);
  
    V_SAFE_DELETE_ARRAY(pszBuffer);

    return 1;
  }


  SWIGINTERN int VTypedObject_ToString(lua_State *L)
  {
    //this will move this function to the method table of the specified class
    
    SWIG_CONVERT_POINTER(L, -1, VTypedObject, self)
    
    char pszBuffer[1024];
    
    sprintf(pszBuffer, "%s: 0x%p",self->GetClassTypeId()->m_lpszClassName,self); //format as requested
      
    lua_pushstring(L, pszBuffer);
    
    return 1;
  }

SWIGINTERN int VisTypedEngineObject_cl_GetComponentCount(VisTypedEngineObject_cl *self){
      return self->Components().Count();
    }
SWIGINTERN bool VisTypedEngineObject_cl_AddComponent(VisTypedEngineObject_cl *self,IVObjectComponent *component){
      if (component == NULL) return false;
      return self->AddComponent(component)==TRUE;
    }
SWIGINTERN bool VisTypedEngineObject_cl_RemoveComponent(VisTypedEngineObject_cl *self,IVObjectComponent *component){
      if (component == NULL) return false;
      return self->RemoveComponent(component)==TRUE;
    }
SWIGINTERN bool VisTypedEngineObject_cl_RemoveComponentOfType__SWIG_0(VisTypedEngineObject_cl *self,char const *szTypeName,char const *szOptionalComponentName=NULL){
      if(szTypeName==NULL)
        return false;
      
      IVObjectComponent *pComponent = NULL;
      
      if(szOptionalComponentName)
        pComponent = self->Components().GetComponentOfTypeAndName(szTypeName, szOptionalComponentName);
      else
        pComponent = self->Components().GetComponentOfType(szTypeName);
      
      if(pComponent==NULL)
        return false;
        
      return self->RemoveComponent(pComponent)==TRUE;
    }

  SWIGINTERN int VisTypedEngineObject_cl_AddComponentOfType(lua_State *L)
  {

    SWIG_CONVERT_POINTER(L, 1, VisTypedEngineObject_cl, pSelf)

    //param #2: type name of the component
    if(!SWIG_lua_isnilstring(L,2)) luaL_error(L, "Expected a string value as parameter 2 for VisTypedEngineObject_AddComponentOfType");
    const char * szComponentType = lua_tostring(L, 2);       
    
    //param #3: optional name of the component
    const char * szComponentName = NULL;
    if(lua_isstring(L, 3))  szComponentName = lua_tostring(L, 3);
    
    bool bCreateDynamicProperty = true;
    if(lua_isboolean(L, 4)) bCreateDynamicProperty = lua_toboolean(L,4)==TRUE;

    // Search for a component type with the specified name
    VType *pType = Vision::GetTypeManager()->GetType(szComponentType);
    if (pType==NULL)
    {
      hkvLog::Warning("[Lua] AddComponentOfType: did not find component of the specified type: %s", szComponentType);
      lua_settop(L, 0); //remove all items from the stack
      lua_pushnil(L);
      return 1;
    }

    // Create an instance of that component type
    VSmartPtr<IVObjectComponent> spComponent = (IVObjectComponent *)pType->CreateInstance();
    if (spComponent==NULL)
    {
      hkvLog::Warning("[Lua] AddComponentOfType: Failed construction an instance of the specified component type: %s", szComponentType);
      lua_settop(L, 0); //remove all items from the stack
      lua_pushnil(L);
      return 1;
    }

    if(szComponentName && bCreateDynamicProperty)
    {
      spComponent->SetComponentName(szComponentName);
        
      //prepare stack in order to set the result of the casted object component as property
      //remove everything, expect self
      lua_settop(L, 1);                                           //stack: userdata, TOP
      lua_pushstring(L, szComponentName);                         //stack: userdata, key, TOP
      LUA_PushObjectProxy(L, spComponent, pSelf);                  //stack: userdata, key, result, TOP

      //set the dynamic property
      VisionLuaClassSet(L);                                       //stack: userdata, key, result, TOP
      lua_replace(L, 1);                                          //stack: result, key, TOP
      lua_pop(L, 1);                                              //stack: result, TOP

    }
    else
    {   
      //if the component has a name, but the user likes to avoid a dynamic property,
      //we only set the name of the component and try to cast
      
      if(szComponentName) spComponent->SetComponentName(szComponentName);
      
      //clean stack (remove all call params including self)
      lua_settop(L, 0);                                          //stack: TOP
      LUA_PushObjectProxy(L, spComponent, pSelf);                 //stack: result, TOP
    }

    // Check if the component can actually be added. Don't do it if it can't.
    VString sCanAddError;
    if (!pSelf->CanAddComponent(spComponent, sCanAddError))
    {
      hkvLog::Warning("[Lua] AddComponentOfType: Can't add component of type '%s'. Error: %s", szComponentType, sCanAddError.AsChar());
      lua_settop(L, 0); //remove all items from the stack
      lua_pushnil(L);
      return 1;
    }

    // Add the component to the current object
    pSelf->AddComponent(spComponent);
    
    return 1;
  }


  SWIGINTERN int VisTypedEngineObject_cl_GetComponentAt(lua_State *L)
  {

    SWIG_CONVERT_POINTER(L, 1, VisTypedEngineObject_cl, pSelf)

    //param #2: type name of the component
    if(!lua_isnumber(L,2)) luaL_error(L, "Expected a numeric index as parameter 2 for VisTypedEngineObject_cl_GetComponentAt");
    int iIndex = (int)lua_tonumber(L, 2);
   
    lua_settop(L, 0);                                              //stack: TOP
    if(iIndex>0 && iIndex<=pSelf->Components().Count())
      LUA_PushObjectProxy(L, pSelf->Components().GetAt(iIndex-1)); //stack: result, TOP
    else
      lua_pushnil(L);                                              //stack: nil, TOP

    return 1;
  }


  SWIGINTERN int VisTypedEngineObject_cl_AddTriggerTarget(lua_State *L)
  {
    
    //insert the class name of the component as parameter #2
    lua_pushstring(L, "VisTriggerTargetComponent_cl");
    lua_insert(L, 2);
    
    return VisTypedEngineObject_cl_AddComponentOfType(L);
  }


  SWIGINTERN int VisTypedEngineObject_cl_AddTriggerSource(lua_State *L)
  {
    
    //insert the class name of the component as parameter #2
    lua_pushstring(L, "VisTriggerSourceComponent_cl");
    lua_insert(L, 2);
    
    return VisTypedEngineObject_cl_AddComponentOfType(L);
  }


  SWIGINTERN int VisTypedEngineObject_cl_AddAnimation(lua_State *L)
  {
    
    //insert the class name of the component as parameter #2
    lua_pushstring(L, "VAnimationComponent");
    lua_insert(L, 2);
    
    return VisTypedEngineObject_cl_AddComponentOfType(L);
  }


  SWIGINTERN int VisTypedEngineObject_cl_AddTimedValue(lua_State *L)
  {
    
    //insert the class name of the component as parameter #2
    lua_pushstring(L, "VTimedValueComponent");
    lua_insert(L, 2);
    
    return VisTypedEngineObject_cl_AddComponentOfType(L);
  }


  SWIGINTERN int VisTypedEngineObject_cl_AddTransitionStateMachine(lua_State *L)
  {
    
    //insert the class name of the component as parameter #2
    lua_pushstring(L, "VTransitionStateMachine");
    lua_insert(L, 2);
    
    return VisTypedEngineObject_cl_AddComponentOfType(L);
  }


  SWIGINTERN int VisTypedEngineObject_cl_GetComponentOfType(lua_State *L)
  {

    SWIG_CONVERT_POINTER(L, 1, VisTypedEngineObject_cl, pSelf)

    //param #2: type name of the component
    if(!SWIG_lua_isnilstring(L,2)) luaL_error(L, "Expected a string value as parameter 2 for VisTypedEngineObject_GetComponentOfType");
    const char * szComponentType = lua_tostring(L, 2);       
    
    //param #3: optional name of the component
    const char * szComponentName = NULL;
    if(lua_isstring(L, 3))  szComponentName = lua_tostring(L, 3);
    
    IVObjectComponent *pComponent = NULL;
    
    if(szComponentName)
      pComponent = pSelf->Components().GetComponentOfTypeAndName(szComponentType, szComponentName);
    else
      pComponent = pSelf->Components().GetComponentOfType(szComponentType);    

    //clean stack (remove all call params including self)
    lua_settop(L, 0);                                             //stack: TOP

    if(pComponent) LUA_PushObjectProxy(L, pComponent);            //stack: result, TOP
    else           lua_pushnil(L);                                //stack: nil, TOP

    return 1;
  }


  SWIGINTERN int VisTypedEngineObject_cl_GetComponentOfBaseType(lua_State *L)
  {

    SWIG_CONVERT_POINTER(L, 1, VisTypedEngineObject_cl, pSelf)

    //param #2: type name of the component
    if(!SWIG_lua_isnilstring(L,2)) luaL_error(L, "Expected a string value as parameter 2 for VisTypedEngineObject_GetComponentOfBaseType");
    const char * szBaseTypeName = lua_tostring(L, 2);       
    
    //param #3: optional name of the component
    const char * szComponentName = NULL;
    if(lua_isstring(L, 3))  szComponentName = lua_tostring(L, 3);
        
    IVObjectComponent *pComponent = NULL;
    
    if(szComponentName)
      pComponent = pSelf->Components().GetComponentOfBaseTypeAndName(szBaseTypeName, szComponentName);
    else
      pComponent = pSelf->Components().GetComponentOfBaseType(szBaseTypeName);

    //clean stack (remove all call params including self)
    lua_settop(L, 0);                                             //stack: TOP

    if(pComponent) LUA_PushObjectProxy(L, pComponent);            //stack: result, TOP
    else           lua_pushnil(L);                                //stack: nil, TOP
    
    return 1;
  }


  SWIGINTERN int VisTypedEngineObject_cl_Concat(lua_State *L)
  {
    //this will move this function to the method table of the specified class
    
    bool ARGS_OK = true;
    
    const char *pszString = NULL;
    int iIndex = -1;
    
    //The concat operator allows "foo"..self and self.."bar" so that
    //we have to consider self as first and as second stack element.
    
    //handle string as first (top) element
    if(lua_isstring(L,iIndex))
    {
      pszString = lua_tostring(L,iIndex);
      iIndex--;
    }
    
    SWIG_CONVERT_POINTER(L, iIndex, VisTypedEngineObject_cl, self)
    iIndex--;
    
    //handle string as second element
    if(iIndex==-2)
    {
      pszString = lua_tostring(L,iIndex);
    }
        
    unsigned int uiLen = (unsigned int) strlen(pszString);
    char *pszBuffer = new char[uiLen+128];
   
    sprintf(pszBuffer, "%s",self->GetClassTypeId()->m_lpszClassName); //format as requested
    
    //the new buffer should have the size of the old string and the new format string
    VASSERT_MSG(128>(strlen(pszBuffer)+uiLen), "Please increase your temp buffer size!");
    
    //append or prepend old buffer buffer (depending on the position inside the lua stack)
    if(iIndex==-3) //append old string
    {
      memcpy(pszBuffer+strlen(pszBuffer),pszString,uiLen+1); //also copy the terminator at the end
    }
    else //prepend old string
    {
      memmove(pszBuffer+uiLen,pszBuffer, strlen(pszBuffer)+1); //also move the terminator at the end
      memcpy(pszBuffer,pszString,uiLen); //insert the old string
    }

    lua_pushstring(L, pszBuffer);
  
    V_SAFE_DELETE_ARRAY(pszBuffer);

    return 1;
  }


  SWIGINTERN int VisTypedEngineObject_cl_ToString(lua_State *L)
  {
    //this will move this function to the method table of the specified class
    
    SWIG_CONVERT_POINTER(L, -1, VisTypedEngineObject_cl, self)
    
    char pszBuffer[1024];
    
    sprintf(pszBuffer, "%s: 0x%p",self->GetClassTypeId()->m_lpszClassName,self); //format as requested
      
    lua_pushstring(L, pszBuffer);
    
    return 1;
  }

SWIGINTERN bool IVObjectComponent_CanAttachToObject(IVObjectComponent *self,VisTypedEngineObject_cl *typedObject){
      VString sError;
      bool bPossible = self->CanAttachToObject(typedObject, sError) == TRUE;
      if(!bPossible) hkvLog::Warning("%s", sError.AsChar());
      return bPossible;
    }

  SWIGINTERN int IVObjectComponent_Concat(lua_State *L)
  {
    //this will move this function to the method table of the specified class
    
    bool ARGS_OK = true;
    
    const char *pszString = NULL;
    int iIndex = -1;
    
    //The concat operator allows "foo"..self and self.."bar" so that
    //we have to consider self as first and as second stack element.
    
    //handle string as first (top) element
    if(lua_isstring(L,iIndex))
    {
      pszString = lua_tostring(L,iIndex);
      iIndex--;
    }
    
    SWIG_CONVERT_POINTER(L, iIndex, IVObjectComponent, self)
    iIndex--;
    
    //handle string as second element
    if(iIndex==-2)
    {
      pszString = lua_tostring(L,iIndex);
    }
        
    unsigned int uiLen = (unsigned int) strlen(pszString);
    char *pszBuffer = new char[uiLen+128];
   
    sprintf(pszBuffer, "%s",self->GetComponentName()==NULL?self->GetClassTypeId()->m_lpszClassName:self->GetComponentName()); //format as requested
    
    //the new buffer should have the size of the old string and the new format string
    VASSERT_MSG(128>(strlen(pszBuffer)+uiLen), "Please increase your temp buffer size!");
    
    //append or prepend old buffer buffer (depending on the position inside the lua stack)
    if(iIndex==-3) //append old string
    {
      memcpy(pszBuffer+strlen(pszBuffer),pszString,uiLen+1); //also copy the terminator at the end
    }
    else //prepend old string
    {
      memmove(pszBuffer+uiLen,pszBuffer, strlen(pszBuffer)+1); //also move the terminator at the end
      memcpy(pszBuffer,pszString,uiLen); //insert the old string
    }

    lua_pushstring(L, pszBuffer);
  
    V_SAFE_DELETE_ARRAY(pszBuffer);

    return 1;
  }


  SWIGINTERN int IVObjectComponent_ToString(lua_State *L)
  {
    //this will move this function to the method table of the specified class
    
    SWIG_CONVERT_POINTER(L, -1, IVObjectComponent, self)
    
    char pszBuffer[1024];
    
    sprintf(pszBuffer, "%s: %s",self->GetClassTypeId()->m_lpszClassName,self->GetComponentName()); //format as requested
      
    lua_pushstring(L, pszBuffer);
    
    return 1;
  }

SWIGINTERN bool VisObjectKey_cl_HasKey__SWIG_0(VisObjectKey_cl *self,char const *szKey,bool bIgnoreCase=true){
      return self->HasObjectKey(szKey, bIgnoreCase)==TRUE;
    }
SWIGINTERN hkvVec3 VisObject3D_cl_GetPosition(VisObject3D_cl *self){
      return hkvVec3(self->GetPosition()); // return by value
    }
SWIGINTERN void VisObject3D_cl_SetPosition__SWIG_1(VisObject3D_cl *self,float x,float y,float z){
      self->SetPosition(hkvVec3(x,y,z));
    }
SWIGINTERN void VisObject3D_cl_IncPosition__SWIG_1(VisObject3D_cl *self,float x,float y,float z){
      self->IncPosition(hkvVec3(x,y,z));
    }
SWIGINTERN void VisObject3D_cl_SetOrientation__SWIG_0(VisObject3D_cl *self,float x,float y,float z){
      self->SetOrientation(hkvVec3(x,y,z));
    }
SWIGINTERN void VisObject3D_cl_IncOrientation__SWIG_0(VisObject3D_cl *self,float x,float y,float z){
      self->IncOrientation(hkvVec3(x,y,z));
    }
SWIGINTERN void VisObject3D_cl_SetUseEulerAngles(VisObject3D_cl *self,bool bValue){
    self->SetUseEulerAngles(bValue);
  }
SWIGINTERN bool VisObject3D_cl_GetUseEulerAngles(VisObject3D_cl const *self){
    return self->GetUseEulerAngles()==TRUE;
  }
SWIGINTERN hkvVec3 VisObject3D_cl_GetMotionDeltaWorldSpace(VisObject3D_cl const *self){
    return hkvVec3(self->GetMotionDeltaWorldSpace());
  }
SWIGINTERN hkvVec3 VisObject3D_cl_GetMotionDeltaLocalSpace(VisObject3D_cl const *self){
    return hkvVec3(self->GetMotionDeltaLocalSpace());
  }
SWIGINTERN bool VisObject3D_cl_HasRotationDelta(VisObject3D_cl const *self){
    return self->HasRotationDelta()==TRUE;
  }
SWIGINTERN hkvVec3 VisObject3D_cl_GetRotationDelta(VisObject3D_cl const *self){
    return hkvVec3(self->GetRotationDelta());
  }

  SWIGINTERN int VisObject3D_cl_GetChild(lua_State *L)
  {
    SWIG_CONVERT_POINTER(L, 1, VisObject3D_cl, pSelf)
    
    if(lua_isnumber(L, 2))  
    {
      int iIndex = (int)lua_tonumber(L, 2);
      
      const int iCount = pSelf->GetNumChildren();
      
      if(iIndex<iCount)
      {
        LUA_PushObjectProxy(L, (VisObject3D_cl *)pSelf->GetChild(iIndex)); //will handle NULL as well
        return 1;
      }
    }
    else if(lua_isstring(L, 2))
    {
      const char *  pszName = lua_tostring(L, 2);

      const int iCount = pSelf->GetNumChildren();
      for (int i=0;i<iCount;i++)
      {
        VisObject3D_cl *pChild = (VisObject3D_cl *)pSelf->GetChild(i);
        if (pChild && pChild->HasObjectKey(pszName))
        {
          LUA_PushObjectProxy(L, pChild);
          return 1;
        }
      }
    }
    
    //parameters invalid
    lua_pushnil(L);
  
    return 1;
  }


  SWIGINTERN int VisObject3D_cl_Concat(lua_State *L)
  {
    //this will move this function to the method table of the specified class
    
    bool ARGS_OK = true;
    
    const char *pszString = NULL;
    int iIndex = -1;
    
    //The concat operator allows "foo"..self and self.."bar" so that
    //we have to consider self as first and as second stack element.
    
    //handle string as first (top) element
    if(lua_isstring(L,iIndex))
    {
      pszString = lua_tostring(L,iIndex);
      iIndex--;
    }
    
    SWIG_CONVERT_POINTER(L, iIndex, VisObject3D_cl, self)
    iIndex--;
    
    //handle string as second element
    if(iIndex==-2)
    {
      pszString = lua_tostring(L,iIndex);
    }
        
    unsigned int uiLen = (unsigned int) strlen(pszString);
    char *pszBuffer = new char[uiLen+128];
   
    sprintf(pszBuffer, "[%1.2f,%1.2f,%1.2f]",self->GetPosition().x,self->GetPosition().y,self->GetPosition().z); //format as requested
    
    //the new buffer should have the size of the old string and the new format string
    VASSERT_MSG(128>(strlen(pszBuffer)+uiLen), "Please increase your temp buffer size!");
    
    //append or prepend old buffer buffer (depending on the position inside the lua stack)
    if(iIndex==-3) //append old string
    {
      memcpy(pszBuffer+strlen(pszBuffer),pszString,uiLen+1); //also copy the terminator at the end
    }
    else //prepend old string
    {
      memmove(pszBuffer+uiLen,pszBuffer, strlen(pszBuffer)+1); //also move the terminator at the end
      memcpy(pszBuffer,pszString,uiLen); //insert the old string
    }

    lua_pushstring(L, pszBuffer);
  
    V_SAFE_DELETE_ARRAY(pszBuffer);

    return 1;
  }


  SWIGINTERN int VisObject3D_cl_ToString(lua_State *L)
  {
    //this will move this function to the method table of the specified class
    
    SWIG_CONVERT_POINTER(L, -1, VisObject3D_cl, self)
    
    char pszBuffer[1024];
    
    sprintf(pszBuffer, "%s: '%s' [%1.2f,%1.2f,%1.2f]",self->GetClassTypeId()->m_lpszClassName,self->GetObjectKey(),self->GetPosition().x,self->GetPosition().y,self->GetPosition().z); //format as requested
      
    lua_pushstring(L, pszBuffer);
    
    return 1;
  }

SWIGINTERN bool VisBaseEntity_cl_SetMesh__SWIG_0(VisBaseEntity_cl *self,char const *szMeshFile){
      return self->SetMesh(szMeshFile) == TRUE;
    }
SWIGINTERN bool VisBaseEntity_cl_SetMesh__SWIG_1(VisBaseEntity_cl *self,VDynamicMesh *pMesh){
      self->SetMesh(pMesh);
      return true; //unify the return signature
    }
SWIGINTERN void VisBaseEntity_cl_SetThinkFunctionStatus(VisBaseEntity_cl *self,bool bEnable){
      for(int i=0; i<self->Components().Count();i++)
      {
        if( self->Components().GetPtrs()[i]->IsOfType(VScriptComponent::GetClassTypeId()) )
        {
          ((VScriptComponent *)(self->Components().GetPtrs()[i]))->SetThinkFunctionStatus(bEnable);
        }
      }
      self->SetThinkFunctionStatus(bEnable?TRUE:FALSE);
    }
SWIGINTERN bool VisBaseEntity_cl_GetThinkFunctionStatus(VisBaseEntity_cl const *self){
    return self->GetThinkFunctionStatus()==TRUE;
  }
SWIGINTERN bool VisBaseEntity_cl_HasMesh(VisBaseEntity_cl const *self){
    return self->HasMesh()==TRUE;
  }
SWIGINTERN void VisBaseEntity_cl_SetCastShadows(VisBaseEntity_cl *self,bool bValue){
    self->SetCastShadows(bValue);
  }
SWIGINTERN bool VisBaseEntity_cl_GetCastShadows(VisBaseEntity_cl const *self){
    return self->GetCastShadows()==TRUE;
  }
SWIGINTERN bool VisBaseEntity_cl_SetScaling__SWIG_0(VisBaseEntity_cl *self,float fScaling){
      return self->SetScaling(fScaling)==TRUE;
    }
SWIGINTERN bool VisBaseEntity_cl_SetScaling__SWIG_1(VisBaseEntity_cl *self,float x,float y,float z){
      return self->SetScaling(hkvVec3(x,y,z))==TRUE;
    }
SWIGINTERN bool VisBaseEntity_cl_SetScaling__SWIG_2(VisBaseEntity_cl *self,hkvVec3 const *pScale){
      if(pScale) return self->SetScaling(*pScale)==TRUE;
      return false;
    }
SWIGINTERN hkvVec3 VisBaseEntity_cl_GetScaling(VisBaseEntity_cl const *self){
    return hkvVec3(self->GetScaling());
  }
SWIGINTERN hkvAlignedBBox VisBaseEntity_cl_GetCustomTraceBBox(VisBaseEntity_cl *self){
      return *(self->GetCustomTraceBBox()); //return by value
    }
SWIGINTERN void VisBaseEntity_cl_SetTraceAccuracy(VisBaseEntity_cl *self,int iTraceAccuracy){
      self->SetTraceAccuracy((VisTraceAccuracy_e) iTraceAccuracy);
    }
SWIGINTERN bool VisBaseEntity_cl_WasVisibleInLastFrame(VisBaseEntity_cl const *self){
      return self->WasVisibleLastFrame(NULL) == TRUE;
    }
SWIGINTERN bool VisBaseEntity_cl_WasVisibleInAnyLastFrame(VisBaseEntity_cl const *self){
      return self->WasVisibleInAnyLastFrame() == TRUE;
    }
SWIGINTERN hkvAlignedBBox VisBaseEntity_cl_GetBoundingBox(VisBaseEntity_cl *self){
      hkvAlignedBBox newBox;
      self->GetCurrentVisBoundingBox(newBox);
      return newBox; //return by value
    }
SWIGINTERN hkvAlignedBBox VisBaseEntity_cl_GetCollisionBoundingBox(VisBaseEntity_cl *self){
      hkvAlignedBBox newBox;
      self->GetCollisionBoundingBox(newBox);
      return newBox; //return by value
    }
SWIGINTERN void VisBaseEntity_cl_SetVisible(VisBaseEntity_cl *self,bool bVisible){
      self->SetVisibleBitmask(bVisible ? VIS_ENTITY_VISIBLE : VIS_ENTITY_INVISIBLE);
    }
SWIGINTERN bool VisBaseEntity_cl_IsVisible(VisBaseEntity_cl *self){
      return (self->GetVisibleBitmask() & VIS_ENTITY_VISIBLE) != FALSE;
    }
SWIGINTERN void VisBaseEntity_cl_SetVisibleBitmask(VisBaseEntity_cl *self,VBitmask *pBitmask){
    if(pBitmask) self->SetVisibleBitmask(pBitmask->Get());
  }
SWIGINTERN VBitmask VisBaseEntity_cl_GetVisibleBitmask(VisBaseEntity_cl const *self){
    return VBitmask(self->GetVisibleBitmask());
  }
SWIGINTERN void VisBaseEntity_cl_SetLightInfluenceBitmask(VisBaseEntity_cl *self,VBitmask *pBitmask){
    if(pBitmask) self->SetLightInfluenceBitMask(pBitmask->Get());
  }
SWIGINTERN VBitmask VisBaseEntity_cl_GetLightInfluenceBitmask(VisBaseEntity_cl const *self){
    return VBitmask(self->GetLightInfluenceBitMask());
  }
SWIGINTERN bool VisBaseEntity_cl_SetEffectForAllSurfaces__SWIG_0(VisBaseEntity_cl *self,char const *szShaderLib,char const *szEffect,char const *szParamString=""){
	  if(!self->HasMesh()) return false;
	  return VScriptRenderer_wrapper::SetEffectForEntity(self, -1, szShaderLib, szEffect, szParamString);
	}
SWIGINTERN bool VisBaseEntity_cl_SetEffectForAllSurfaces__SWIG_2(VisBaseEntity_cl *self,char const *szShaderLib,char const *szEffect,VMap< VString,VString > const &params){
	  if(!self->HasMesh()) return false;
	  return VScriptRenderer_wrapper::SetEffectForEntity(self, -1, szShaderLib, szEffect, params);
	}
SWIGINTERN bool VisBaseEntity_cl_SetEffect__SWIG_0(VisBaseEntity_cl *self,VisSurface_cl *pSurfaceToChange,char const *szShaderLib,char const *szEffect,char const *szParamString=""){
      if(!self->HasMesh()) return false;
	  int iSurfaceToChangeIndex = VScriptRenderer_wrapper::FindSurfaceIndex(self, pSurfaceToChange);
	  if(iSurfaceToChangeIndex < 0)
	    return false;
      return VScriptRenderer_wrapper::SetEffectForEntity(self, iSurfaceToChangeIndex, szShaderLib, szEffect, szParamString);
    }
SWIGINTERN bool VisBaseEntity_cl_SetEffect__SWIG_2(VisBaseEntity_cl *self,int iSurfaceToChangeIndex,char const *szShaderLib,char const *szEffect,char const *szParamString=""){
      if(!self->HasMesh()) return false;
      if(iSurfaceToChangeIndex >= self->GetMesh()->GetSurfaceCount() || iSurfaceToChangeIndex < 0) return false;
      
      return VScriptRenderer_wrapper::SetEffectForEntity(self, iSurfaceToChangeIndex, szShaderLib, szEffect, szParamString);
    }
SWIGINTERN bool VisBaseEntity_cl_SetEffect__SWIG_4(VisBaseEntity_cl *self,char const *szSurfaceName,char const *szShaderLib,char const *szEffect,char const *szParamString=""){
      if(!self->HasMesh()) return false;
      VisSurface_cl *pSurfaceToChange = self->GetMesh()->GetSurfaceByName(szSurfaceName);
	  int iSurfaceToChangeIndex = VScriptRenderer_wrapper::FindSurfaceIndex(self, pSurfaceToChange);
	  if(iSurfaceToChangeIndex < 0)
	    return false;
      return VScriptRenderer_wrapper::SetEffectForEntity(self, iSurfaceToChangeIndex, szShaderLib, szEffect, szParamString);
    }
SWIGINTERN bool VisBaseEntity_cl_SetEffect__SWIG_6(VisBaseEntity_cl *self,VisSurface_cl *pSurfaceToChange,char const *szShaderLib,char const *szEffect,VMap< VString,VString > const &params){
      if(!self->HasMesh()) return false;
	  int iSurfaceToChangeIndex = VScriptRenderer_wrapper::FindSurfaceIndex(self, pSurfaceToChange);
	  if(iSurfaceToChangeIndex < 0)
	    return false;
      return VScriptRenderer_wrapper::SetEffectForEntity(self, iSurfaceToChangeIndex, szShaderLib, szEffect, params);
    }
SWIGINTERN bool VisBaseEntity_cl_SetEffect__SWIG_7(VisBaseEntity_cl *self,int iSurfaceToChangeIndex,char const *szShaderLib,char const *szEffect,VMap< VString,VString > const &params){
      if(!self->HasMesh()) return false;
      if(iSurfaceToChangeIndex>=self->GetMesh()->GetSurfaceCount() || iSurfaceToChangeIndex<0) return false;
      return VScriptRenderer_wrapper::SetEffectForEntity(self, iSurfaceToChangeIndex, szShaderLib, szEffect, params);
    }
SWIGINTERN bool VisBaseEntity_cl_SetEffect__SWIG_8(VisBaseEntity_cl *self,char const *szSurfaceName,char const *szShaderLib,char const *szEffect,VMap< VString,VString > const &params){
      if(!self->HasMesh()) return false;
      VisSurface_cl *pSurfaceToChange = self->GetMesh()->GetSurfaceByName(szSurfaceName);
	  int iSurfaceToChangeIndex = VScriptRenderer_wrapper::FindSurfaceIndex(self, pSurfaceToChange);
	  if(iSurfaceToChangeIndex < 0)
	    return false;
      return VScriptRenderer_wrapper::SetEffectForEntity(self, iSurfaceToChangeIndex, szShaderLib, szEffect, params);
    }
SWIGINTERN bool VisBaseEntity_cl_RemoveCustomTextureSet(VisBaseEntity_cl *self){
	  if(!self->HasMesh()) return false;
	  self->SetCustomTextureSet(NULL);
	  return true;
	}
SWIGINTERN void VisBaseEntity_cl_GetEffectParams__SWIG_0(VisBaseEntity_cl *self,VMap< VString,VString > &OUTPUT,int iSurfaceIndex){
      if(!self->HasMesh())
        return;
      if(iSurfaceIndex >= self->GetMesh()->GetSurfaceCount() || iSurfaceIndex < 0)
        return;
      VisSurface_cl *pSurface = self->GetMesh()->GetSurface(iSurfaceIndex);
      return VScriptRenderer_wrapper::GetParamsFromSurface(pSurface, OUTPUT);
    }
SWIGINTERN void VisBaseEntity_cl_GetEffectParams__SWIG_1(VisBaseEntity_cl *self,VMap< VString,VString > &OUTPUT,char const *szSurfaceName){
      if(!self->HasMesh())
        return;
      VisSurface_cl *pSurface = self->GetMesh()->GetSurfaceByName(szSurfaceName);
      return VScriptRenderer_wrapper::GetParamsFromSurface(pSurface, OUTPUT);
    }
SWIGINTERN void VisBaseEntity_cl_GetEffectParams__SWIG_2(VisBaseEntity_cl *self,VMap< VString,VString > &OUTPUT,VisSurface_cl *pSurface){
      return VScriptRenderer_wrapper::GetParamsFromSurface(pSurface, OUTPUT);
    }
SWIGINTERN bool VisBaseEntity_cl_SetTextureForSurface__SWIG_0(VisBaseEntity_cl *self,VTextureObject *pTexture,VisSurface_cl *pSurface,int iTextureType=0){
      return VScriptRenderer_wrapper::SetTextureForSurface(self, pTexture, pSurface, NULL, -1, iTextureType);
    }
SWIGINTERN bool VisBaseEntity_cl_SetTextureForSurface__SWIG_2(VisBaseEntity_cl *self,VTextureObject *pTexture,char const *szSurfaceName,int iTextureType=0){
      return VScriptRenderer_wrapper::SetTextureForSurface(self, pTexture, NULL, szSurfaceName, -1, iTextureType);
    }
SWIGINTERN bool VisBaseEntity_cl_SetTextureForSurface__SWIG_4(VisBaseEntity_cl *self,VTextureObject *pTexture,int iSurfaceIndex,int iTextureType=0){
      return VScriptRenderer_wrapper::SetTextureForSurface(self, pTexture, NULL, NULL, iSurfaceIndex, iTextureType);
    }
SWIGINTERN bool VisBaseEntity_cl_SetTextureForSurface__SWIG_6(VisBaseEntity_cl *self,char const *szTextureFile,VisSurface_cl *pSurface,int iTextureType=0){
      VTextureObject *pTexture = Vision::TextureManager.Load2DTexture(szTextureFile);
      return VScriptRenderer_wrapper::SetTextureForSurface(self, pTexture, pSurface, NULL, -1, iTextureType);
    }
SWIGINTERN bool VisBaseEntity_cl_SetTextureForSurface__SWIG_8(VisBaseEntity_cl *self,char const *szTextureFile,char const *szSurfaceName,int iTextureType=0){
      VTextureObject *pTexture = Vision::TextureManager.Load2DTexture(szTextureFile);
      return VScriptRenderer_wrapper::SetTextureForSurface(self, pTexture, NULL, szSurfaceName, -1, iTextureType);
    }
SWIGINTERN bool VisBaseEntity_cl_SetTextureForSurface__SWIG_10(VisBaseEntity_cl *self,char const *szTextureFile,int iSurfaceIndex,int iTextureType=0){
      VTextureObject *pTexture = Vision::TextureManager.Load2DTexture(szTextureFile);
      return VScriptRenderer_wrapper::SetTextureForSurface(self, pTexture, NULL, NULL, iSurfaceIndex, iTextureType);
    }
SWIGINTERN void VisBaseEntity_cl_ClearShaderSet(VisBaseEntity_cl *self){
      self->SetShaderSet(NULL);
    }
SWIGINTERN void VisBaseEntity_cl_SetPrimarySortingKey(VisBaseEntity_cl *self,int iKey){
      self->SetPrimarySortingKey((signed char)iKey);
    }
SWIGINTERN int VisBaseEntity_cl_GetPrimarySortingKey(VisBaseEntity_cl *self){
      return self->GetPrimarySortingKey();
    }

  SWIGINTERN int VisBaseEntity_cl_Concat(lua_State *L)
  {
    //this will move this function to the method table of the specified class
    
    bool ARGS_OK = true;
    
    const char *pszString = NULL;
    int iIndex = -1;
    
    //The concat operator allows "foo"..self and self.."bar" so that
    //we have to consider self as first and as second stack element.
    
    //handle string as first (top) element
    if(lua_isstring(L,iIndex))
    {
      pszString = lua_tostring(L,iIndex);
      iIndex--;
    }
    
    SWIG_CONVERT_POINTER(L, iIndex, VisBaseEntity_cl, self)
    iIndex--;
    
    //handle string as second element
    if(iIndex==-2)
    {
      pszString = lua_tostring(L,iIndex);
    }
        
    unsigned int uiLen = (unsigned int) strlen(pszString);
    char *pszBuffer = new char[uiLen+128];
   
    sprintf(pszBuffer, "[%s/%s/%s : %1.2f,%1.2f,%1.2f]",(self->GetVisibleBitmask() & VIS_ENTITY_VISIBLE)!=FALSE?"V":"-",self->GetMesh()?"M":"-",self->GetThinkFunctionStatus()?"T":"-",self->GetPosition().x,self->GetPosition().y,self->GetPosition().z); //format as requested
    
    //the new buffer should have the size of the old string and the new format string
    VASSERT_MSG(128>(strlen(pszBuffer)+uiLen), "Please increase your temp buffer size!");
    
    //append or prepend old buffer buffer (depending on the position inside the lua stack)
    if(iIndex==-3) //append old string
    {
      memcpy(pszBuffer+strlen(pszBuffer),pszString,uiLen+1); //also copy the terminator at the end
    }
    else //prepend old string
    {
      memmove(pszBuffer+uiLen,pszBuffer, strlen(pszBuffer)+1); //also move the terminator at the end
      memcpy(pszBuffer,pszString,uiLen); //insert the old string
    }

    lua_pushstring(L, pszBuffer);
  
    V_SAFE_DELETE_ARRAY(pszBuffer);

    return 1;
  }


  SWIGINTERN int VisBaseEntity_cl_ToString(lua_State *L)
  {
    //this will move this function to the method table of the specified class
    
    SWIG_CONVERT_POINTER(L, -1, VisBaseEntity_cl, self)
    
    char pszBuffer[1024];
    
    hkvVec3 vPos = self->GetPosition();
    
    sprintf(pszBuffer, "%s: '%s' [%s/%s/%s : %1.2f,%1.2f,%1.2f]",self->GetClassTypeId()->m_lpszClassName,self->GetObjectKey(),(self->GetVisibleBitmask() & VIS_ENTITY_VISIBLE)!=FALSE?"V":"-",self->GetMesh()?"M":"-",self->GetThinkFunctionStatus()?"T":"-",vPos.x,vPos.y,vPos.z); //format as requested
      
    lua_pushstring(L, pszBuffer);
    
    return 1;
  }


  //we need to define the C++ headers here
  #include "../CloudConnectionClient.hpp"
  #include "../CloudConnection.hpp"  
  #include "../CCAchievement.hpp"

SWIGINTERN CloudConnectionClient *CloudConnectionClient_Cast(unsigned long *lObject){
    return (CloudConnectionClient *) lObject;
  }
SWIGINTERN void CloudConnectionClient_AddScriptCallbackListener__SWIG_1(CloudConnectionClient *self,VCaptureSwigEnvironment *env){
		lua_State* L = env->GetLuaState();

		//Find out which script instance we are calling this from
		VScriptInstance*  pScript = VScriptResourceManager::GetScriptInstanceForState(L);
		VASSERT(pScript);
      
		self->AddScriptCallbackListener(pScript);
    
		env->SetNumReturnValues(lua_yield(L, 0));
	}
SWIGINTERN CloudConnection *CloudConnection_Cast(unsigned long *lObject){
    return (CloudConnection *) lObject;
  }
SWIGINTERN CCAchievement *CCAchievement_Cast(unsigned long *lObject){
    return (CCAchievement *) lObject;
  }
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_V_RGBA_WHITE_get(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *result = 0 ;
  
  SWIG_check_num_args("V_RGBA_WHITE",0,0)
  result = (VColorRef *)&V_RGBA_WHITE;
  
  if(0) // Owned by Lua, wrap the pointer
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_VColorRef,0); SWIG_arg++;
  }
  else // Not owned by Lua, copy the contents
  {
    SWIG_Lua_NewPodObj(L,result,SWIGTYPE_p_VColorRef); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_V_RGBA_GREY_get(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *result = 0 ;
  
  SWIG_check_num_args("V_RGBA_GREY",0,0)
  result = (VColorRef *)&V_RGBA_GREY;
  
  if(0) // Owned by Lua, wrap the pointer
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_VColorRef,0); SWIG_arg++;
  }
  else // Not owned by Lua, copy the contents
  {
    SWIG_Lua_NewPodObj(L,result,SWIGTYPE_p_VColorRef); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_V_RGBA_BLACK_get(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *result = 0 ;
  
  SWIG_check_num_args("V_RGBA_BLACK",0,0)
  result = (VColorRef *)&V_RGBA_BLACK;
  
  if(0) // Owned by Lua, wrap the pointer
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_VColorRef,0); SWIG_arg++;
  }
  else // Not owned by Lua, copy the contents
  {
    SWIG_Lua_NewPodObj(L,result,SWIGTYPE_p_VColorRef); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_V_RGBA_RED_get(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *result = 0 ;
  
  SWIG_check_num_args("V_RGBA_RED",0,0)
  result = (VColorRef *)&V_RGBA_RED;
  
  if(0) // Owned by Lua, wrap the pointer
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_VColorRef,0); SWIG_arg++;
  }
  else // Not owned by Lua, copy the contents
  {
    SWIG_Lua_NewPodObj(L,result,SWIGTYPE_p_VColorRef); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_V_RGBA_YELLOW_get(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *result = 0 ;
  
  SWIG_check_num_args("V_RGBA_YELLOW",0,0)
  result = (VColorRef *)&V_RGBA_YELLOW;
  
  if(0) // Owned by Lua, wrap the pointer
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_VColorRef,0); SWIG_arg++;
  }
  else // Not owned by Lua, copy the contents
  {
    SWIG_Lua_NewPodObj(L,result,SWIGTYPE_p_VColorRef); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_V_RGBA_GREEN_get(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *result = 0 ;
  
  SWIG_check_num_args("V_RGBA_GREEN",0,0)
  result = (VColorRef *)&V_RGBA_GREEN;
  
  if(0) // Owned by Lua, wrap the pointer
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_VColorRef,0); SWIG_arg++;
  }
  else // Not owned by Lua, copy the contents
  {
    SWIG_Lua_NewPodObj(L,result,SWIGTYPE_p_VColorRef); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_V_RGBA_CYAN_get(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *result = 0 ;
  
  SWIG_check_num_args("V_RGBA_CYAN",0,0)
  result = (VColorRef *)&V_RGBA_CYAN;
  
  if(0) // Owned by Lua, wrap the pointer
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_VColorRef,0); SWIG_arg++;
  }
  else // Not owned by Lua, copy the contents
  {
    SWIG_Lua_NewPodObj(L,result,SWIGTYPE_p_VColorRef); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_V_RGBA_BLUE_get(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *result = 0 ;
  
  SWIG_check_num_args("V_RGBA_BLUE",0,0)
  result = (VColorRef *)&V_RGBA_BLUE;
  
  if(0) // Owned by Lua, wrap the pointer
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_VColorRef,0); SWIG_arg++;
  }
  else // Not owned by Lua, copy the contents
  {
    SWIG_Lua_NewPodObj(L,result,SWIGTYPE_p_VColorRef); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_V_RGBA_PURPLE_get(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *result = 0 ;
  
  SWIG_check_num_args("V_RGBA_PURPLE",0,0)
  result = (VColorRef *)&V_RGBA_PURPLE;
  
  if(0) // Owned by Lua, wrap the pointer
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_VColorRef,0); SWIG_arg++;
  }
  else // Not owned by Lua, copy the contents
  {
    SWIG_Lua_NewPodObj(L,result,SWIGTYPE_p_VColorRef); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VColorRef__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *result = 0 ;
  
  SWIG_check_num_args("VColorRef",0,0)
  result = (VColorRef *)new VColorRef();
  
  if(1) // Owned by Lua, wrap the pointer
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_VColorRef,1); SWIG_arg++;
  }
  else // Not owned by Lua, copy the contents
  {
    SWIG_Lua_NewPodObj(L,result,SWIGTYPE_p_VColorRef); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VColorRef__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UBYTE arg1 ;
  UBYTE arg2 ;
  UBYTE arg3 ;
  UBYTE arg4 ;
  VColorRef *result = 0 ;
  
  SWIG_check_num_args("VColorRef",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("VColorRef",1,"UBYTE");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VColorRef",2,"UBYTE");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("VColorRef",3,"UBYTE");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("VColorRef",4,"UBYTE");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UBYTE)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UBYTE)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UBYTE)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UBYTE)lua_tonumber(L, 4);
  result = (VColorRef *)new VColorRef(arg1,arg2,arg3,arg4);
  
  if(1) // Owned by Lua, wrap the pointer
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_VColorRef,1); SWIG_arg++;
  }
  else // Not owned by Lua, copy the contents
  {
    SWIG_Lua_NewPodObj(L,result,SWIGTYPE_p_VColorRef); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VColorRef__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  UBYTE arg1 ;
  UBYTE arg2 ;
  UBYTE arg3 ;
  VColorRef *result = 0 ;
  
  SWIG_check_num_args("VColorRef",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("VColorRef",1,"UBYTE");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VColorRef",2,"UBYTE");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("VColorRef",3,"UBYTE");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UBYTE)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UBYTE)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UBYTE)lua_tonumber(L, 3);
  result = (VColorRef *)new VColorRef(arg1,arg2,arg3);
  
  if(1) // Owned by Lua, wrap the pointer
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_VColorRef,1); SWIG_arg++;
  }
  else // Not owned by Lua, copy the contents
  {
    SWIG_Lua_NewPodObj(L,result,SWIGTYPE_p_VColorRef); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef_Clear(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  
  SWIG_check_num_args("Clear",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("Clear",1,"VColorRef *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Clear",1,"VColorRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef_Clear",1,SWIGTYPE_p_VColorRef);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef_Clear", 1, "VColorRef *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef_SetRGBA(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  UINT arg4 ;
  UINT arg5 ;
  
  SWIG_check_num_args("SetRGBA",5,5)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetRGBA",1,"VColorRef *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetRGBA",1,"VColorRef *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetRGBA",2,"UINT");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetRGBA",3,"UINT");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetRGBA",4,"UINT");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetRGBA",5,"UINT");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef_SetRGBA",1,SWIGTYPE_p_VColorRef);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UINT)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UINT)lua_tonumber(L, 5);
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef_SetRGBA", 1, "VColorRef *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetRGBA(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef_SetRGB(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  UINT arg4 ;
  
  SWIG_check_num_args("SetRGB",4,4)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetRGB",1,"VColorRef *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetRGB",1,"VColorRef *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetRGB",2,"UINT");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetRGB",3,"UINT");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetRGB",4,"UINT");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef_SetRGB",1,SWIGTYPE_p_VColorRef);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UINT)lua_tonumber(L, 4);
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef_SetRGB", 1, "VColorRef *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetRGB(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef___eq(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  VColorRef *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("operator ==",1,"VColorRef *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"VColorRef *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"VColorRef const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef___eq",1,SWIGTYPE_p_VColorRef);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef___eq",2,SWIGTYPE_p_VColorRef);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef___eq", 1, "VColorRef *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)(arg1)->operator ==((VColorRef const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef___add(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  VColorRef *arg2 = 0 ;
  VColorRef result;
  
  SWIG_check_num_args("operator +",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("operator +",1,"VColorRef const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"VColorRef const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator +",2,"VColorRef const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef___add",1,SWIGTYPE_p_VColorRef);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef___add",2,SWIGTYPE_p_VColorRef);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef___add", 1, "VColorRef const *", "deleted native object");
    SWIG_fail;
  }
  
  result = ((VColorRef const *)arg1)->operator +((VColorRef const &)*arg2);
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_VColorRef); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef___sub(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  VColorRef *arg2 = 0 ;
  VColorRef result;
  
  SWIG_check_num_args("operator -",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("operator -",1,"VColorRef const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"VColorRef const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"VColorRef const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef___sub",1,SWIGTYPE_p_VColorRef);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef___sub",2,SWIGTYPE_p_VColorRef);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef___sub", 1, "VColorRef const *", "deleted native object");
    SWIG_fail;
  }
  
  result = ((VColorRef const *)arg1)->operator -((VColorRef const &)*arg2);
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_VColorRef); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  VColorRef *arg2 = 0 ;
  VColorRef result;
  
  SWIG_check_num_args("operator *",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("operator *",1,"VColorRef const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"VColorRef const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"VColorRef const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef___mul",1,SWIGTYPE_p_VColorRef);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef___mul",2,SWIGTYPE_p_VColorRef);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef___mul", 1, "VColorRef const *", "deleted native object");
    SWIG_fail;
  }
  
  result = ((VColorRef const *)arg1)->operator *((VColorRef const &)*arg2);
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_VColorRef); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  float arg2 ;
  VColorRef result;
  
  SWIG_check_num_args("operator *",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("operator *",1,"VColorRef const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"VColorRef const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator *",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef___mul",1,SWIGTYPE_p_VColorRef);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef___mul", 1, "VColorRef const *", "deleted native object");
    SWIG_fail;
  }
  
  result = ((VColorRef const *)arg1)->operator *(arg2);
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_VColorRef); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VColorRef, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_VColorRef, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VColorRef___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VColorRef, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VColorRef___mul__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VColorRef___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator *(VColorRef const *,VColorRef const &)\n"
    "    operator *(VColorRef const *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_VColorRef_IsZero(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  bool result;
  
  SWIG_check_num_args("IsZero",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("IsZero",1,"VColorRef const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IsZero",1,"VColorRef const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef_IsZero",1,SWIGTYPE_p_VColorRef);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef_IsZero", 1, "VColorRef const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)((VColorRef const *)arg1)->IsZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef_IsBlack(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  bool result;
  
  SWIG_check_num_args("IsBlack",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("IsBlack",1,"VColorRef const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IsBlack",1,"VColorRef const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef_IsBlack",1,SWIGTYPE_p_VColorRef);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef_IsBlack", 1, "VColorRef const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)((VColorRef const *)arg1)->IsBlack();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef_GetIntensity(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  float result;
  
  SWIG_check_num_args("GetIntensity",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetIntensity",1,"VColorRef const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetIntensity",1,"VColorRef const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef_GetIntensity",1,SWIGTYPE_p_VColorRef);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef_GetIntensity", 1, "VColorRef const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (float)((VColorRef const *)arg1)->GetIntensity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef_Lerp(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  VColorRef *arg2 = 0 ;
  VColorRef *arg3 = 0 ;
  float arg4 ;
  
  SWIG_check_num_args("Lerp",4,4)
  if(lua_isnil(L, 1)) SWIG_fail_arg("Lerp",1,"VColorRef *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Lerp",1,"VColorRef *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Lerp",2,"VColorRef const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Lerp",3,"VColorRef const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Lerp",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef_Lerp",1,SWIGTYPE_p_VColorRef);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef_Lerp",2,SWIGTYPE_p_VColorRef);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef_Lerp",3,SWIGTYPE_p_VColorRef);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef_Lerp", 1, "VColorRef *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->Lerp((VColorRef const &)*arg2,(VColorRef const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef_r_set(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  UBYTE arg2 ;
  
  SWIG_check_num_args("r",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("r",1,"VColorRef *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("r",1,"VColorRef *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("r",2,"UBYTE");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef_r_set",1,SWIGTYPE_p_VColorRef);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UBYTE)lua_tonumber(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef_r_set", 1, "VColorRef *", "deleted native object");
    SWIG_fail;
  }
  
  if (arg1) (arg1)->r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef_r_get(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  UBYTE result;
  
  SWIG_check_num_args("r",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("r",1,"VColorRef *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("r",1,"VColorRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef_r_get",1,SWIGTYPE_p_VColorRef);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef_r_get", 1, "VColorRef *", "deleted native object");
    SWIG_fail;
  }
  
  result = (UBYTE) ((arg1)->r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef_g_set(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  UBYTE arg2 ;
  
  SWIG_check_num_args("g",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("g",1,"VColorRef *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("g",1,"VColorRef *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("g",2,"UBYTE");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef_g_set",1,SWIGTYPE_p_VColorRef);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UBYTE)lua_tonumber(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef_g_set", 1, "VColorRef *", "deleted native object");
    SWIG_fail;
  }
  
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef_g_get(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  UBYTE result;
  
  SWIG_check_num_args("g",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("g",1,"VColorRef *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("g",1,"VColorRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef_g_get",1,SWIGTYPE_p_VColorRef);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef_g_get", 1, "VColorRef *", "deleted native object");
    SWIG_fail;
  }
  
  result = (UBYTE) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef_b_set(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  UBYTE arg2 ;
  
  SWIG_check_num_args("b",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("b",1,"VColorRef *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("b",1,"VColorRef *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("b",2,"UBYTE");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef_b_set",1,SWIGTYPE_p_VColorRef);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UBYTE)lua_tonumber(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef_b_set", 1, "VColorRef *", "deleted native object");
    SWIG_fail;
  }
  
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef_b_get(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  UBYTE result;
  
  SWIG_check_num_args("b",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("b",1,"VColorRef *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("b",1,"VColorRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef_b_get",1,SWIGTYPE_p_VColorRef);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef_b_get", 1, "VColorRef *", "deleted native object");
    SWIG_fail;
  }
  
  result = (UBYTE) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef_a_set(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  UBYTE arg2 ;
  
  SWIG_check_num_args("a",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("a",1,"VColorRef *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("a",1,"VColorRef *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("a",2,"UBYTE");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef_a_set",1,SWIGTYPE_p_VColorRef);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UBYTE)lua_tonumber(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef_a_set", 1, "VColorRef *", "deleted native object");
    SWIG_fail;
  }
  
  if (arg1) (arg1)->a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef_a_get(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  UBYTE result;
  
  SWIG_check_num_args("a",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("a",1,"VColorRef *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("a",1,"VColorRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef_a_get",1,SWIGTYPE_p_VColorRef);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef_a_get", 1, "VColorRef *", "deleted native object");
    SWIG_fail;
  }
  
  result = (UBYTE) ((arg1)->a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VColorRef__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = 0 ;
  VColorRef *result = 0 ;
  
  SWIG_check_num_args("VColorRef",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("VColorRef",1,"VColorRef const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("new_VColorRef",1,SWIGTYPE_p_VColorRef);
  }
  
  result = (VColorRef *)new_VColorRef__SWIG_3((VColorRef const &)*arg1);
  
  if(1) // Owned by Lua, wrap the pointer
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_VColorRef,1); SWIG_arg++;
  }
  else // Not owned by Lua, copy the contents
  {
    SWIG_Lua_NewPodObj(L,result,SWIGTYPE_p_VColorRef); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VColorRef(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_VColorRef__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VColorRef, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_VColorRef__SWIG_3(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_VColorRef__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_VColorRef__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_VColorRef'\n"
    "  Possible C/C++ prototypes are:\n"
    "    VColorRef()\n"
    "    VColorRef(UBYTE,UBYTE,UBYTE,UBYTE)\n"
    "    VColorRef(UBYTE,UBYTE,UBYTE)\n"
    "    VColorRef(VColorRef const &)\n");
  lua_error(L);return 0;
}


static int _wrap_VColorRef_Clone(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  VColorRef result;
  
  SWIG_check_num_args("Clone",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("Clone",1,"VColorRef *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Clone",1,"VColorRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef_Clone",1,SWIGTYPE_p_VColorRef);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef_Clone", 1, "VColorRef *", "deleted native object");
    SWIG_fail;
  }
  
  result = VColorRef_Clone(arg1);
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_VColorRef); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VColorRef_clone(lua_State* L) {
  int SWIG_arg = 0;
  VColorRef *arg1 = (VColorRef *) 0 ;
  VColorRef result;
  
  SWIG_check_num_args("clone",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("clone",1,"VColorRef *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clone",1,"VColorRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VColorRef,0))){
    SWIG_fail_ptr("VColorRef_clone",1,SWIGTYPE_p_VColorRef);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VColorRef>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VColorRef_clone", 1, "VColorRef *", "deleted native object");
    SWIG_fail;
  }
  
  result = VColorRef_clone(arg1);
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_VColorRef); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VColorRef(void *obj) {
VColorRef *arg1 = (VColorRef *) obj;
delete arg1;
}
static swig_lua_method swig_VColorRef_methods[] = {
    { "__tostring",VColorRef_ToString},
    { "__concat",VColorRef_Concat},
    {"Clear", _wrap_VColorRef_Clear}, 
    {"SetRGBA", _wrap_VColorRef_SetRGBA}, 
    {"SetRGB", _wrap_VColorRef_SetRGB}, 
    {"__eq", _wrap_VColorRef___eq}, 
    {"__add", _wrap_VColorRef___add}, 
    {"__sub", _wrap_VColorRef___sub}, 
    {"__mul", _wrap_VColorRef___mul}, 
    {"IsZero", _wrap_VColorRef_IsZero}, 
    {"IsBlack", _wrap_VColorRef_IsBlack}, 
    {"GetIntensity", _wrap_VColorRef_GetIntensity}, 
    {"Lerp", _wrap_VColorRef_Lerp}, 
    {"Clone", _wrap_VColorRef_Clone}, 
    {"clone", _wrap_VColorRef_clone}, 
    {0,0}
};
static swig_lua_attribute swig_VColorRef_attributes[] = {
    { "r", _wrap_VColorRef_r_get, _wrap_VColorRef_r_set},
    { "g", _wrap_VColorRef_g_get, _wrap_VColorRef_g_set},
    { "b", _wrap_VColorRef_b_get, _wrap_VColorRef_b_set},
    { "a", _wrap_VColorRef_a_get, _wrap_VColorRef_a_set},
    {0,0,0}
};
static swig_lua_class *swig_VColorRef_bases[] = {0};
static const char *swig_VColorRef_base_names[] = {0};
static swig_lua_class _wrap_class_VColorRef = { "VColorRef", &SWIGTYPE_p_VColorRef,_wrap_new_VColorRef, swig_delete_VColorRef, swig_VColorRef_methods, swig_VColorRef_attributes, swig_VColorRef_bases, swig_VColorRef_base_names };

static int _wrap_VTypedObject_GetType(lua_State* L) {
  int SWIG_arg = 0;
  VTypedObject *arg1 = (VTypedObject *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetType",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetType",1,"VTypedObject const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetType",1,"VTypedObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VTypedObject,0))){
    SWIG_fail_ptr("VTypedObject_GetType",1,SWIGTYPE_p_VTypedObject);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VTypedObject const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VTypedObject_GetType", 1, "VTypedObject const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (char *)VTypedObject_GetType((VTypedObject const *)arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VTypedObject_IsOfType(lua_State* L) {
  int SWIG_arg = 0;
  VTypedObject *arg1 = (VTypedObject *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("IsOfType",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("IsOfType",1,"VTypedObject *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IsOfType",1,"VTypedObject *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("IsOfType",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VTypedObject,0))){
    SWIG_fail_ptr("VTypedObject_IsOfType",1,SWIGTYPE_p_VTypedObject);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, VTypedObject>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VTypedObject_IsOfType", 1, "VTypedObject *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VTypedObject_IsOfType(arg1,(char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VTypedObject_GetPropertyType(lua_State* L) {
  int SWIG_arg = 0;
  VTypedObject *arg1 = (VTypedObject *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetPropertyType",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetPropertyType",1,"VTypedObject *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetPropertyType",1,"VTypedObject *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("GetPropertyType",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VTypedObject,0))){
    SWIG_fail_ptr("VTypedObject_GetPropertyType",1,SWIGTYPE_p_VTypedObject);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, VTypedObject>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VTypedObject_GetPropertyType", 1, "VTypedObject *", "deleted native object");
    SWIG_fail;
  }
  
  result = (char *)VTypedObject_GetPropertyType(arg1,(char const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VTypedObject___eq(lua_State* L) {
  int SWIG_arg = 0;
  VTypedObject *arg1 = (VTypedObject *) 0 ;
  VTypedObject *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("operator ==",1,"VTypedObject *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"VTypedObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"VTypedObject const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VTypedObject,0))){
    SWIG_fail_ptr("VTypedObject___eq",1,SWIGTYPE_p_VTypedObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VTypedObject,0))){
    SWIG_fail_ptr("VTypedObject___eq",2,SWIGTYPE_p_VTypedObject);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VTypedObject>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VTypedObject___eq", 1, "VTypedObject *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VTypedObject_operator_Se__Se_(arg1,(VTypedObject const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VTypedObject_GetProperty(lua_State* L) {
  int SWIG_arg = 0;
  VTypedObject *arg1 = (VTypedObject *) 0 ;
  char *arg2 = (char *) 0 ;
  VCaptureSwigEnvironment *arg3 = (VCaptureSwigEnvironment *) 0 ;
  VCaptureSwigEnvironment temp3(L,SWIG_arg) ;
  
  {
    arg3 = &temp3;
  }
  SWIG_check_num_args("GetProperty",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetProperty",1,"VTypedObject *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetProperty",1,"VTypedObject *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("GetProperty",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VTypedObject,0))){
    SWIG_fail_ptr("VTypedObject_GetProperty",1,SWIGTYPE_p_VTypedObject);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, VTypedObject>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VTypedObject_GetProperty", 1, "VTypedObject *", "deleted native object");
    SWIG_fail;
  }
  
  VTypedObject_GetProperty(arg1,(char const *)arg2,arg3);
  
  {
    if(arg3->HasFailed())
    {
      lua_Debug ar;
      lua_getstack(L, 1, &ar);
      lua_getinfo(L, "nSl", &ar);
      lua_pushfstring(L,"Error (%s:%d) in %s, %s", ar.source, ar.currentline, "VTypedObject_GetProperty", arg3->GetErrorMessage());
      SWIG_fail;
    }
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VTypedObject_GetProperties(lua_State* L) {
  int SWIG_arg = 0;
  VTypedObject *arg1 = (VTypedObject *) 0 ;
  VCaptureSwigEnvironment *arg2 = (VCaptureSwigEnvironment *) 0 ;
  VCaptureSwigEnvironment temp2(L,SWIG_arg) ;
  
  {
    arg2 = &temp2;
  }
  SWIG_check_num_args("GetProperties",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetProperties",1,"VTypedObject *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetProperties",1,"VTypedObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VTypedObject,0))){
    SWIG_fail_ptr("VTypedObject_GetProperties",1,SWIGTYPE_p_VTypedObject);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VTypedObject>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VTypedObject_GetProperties", 1, "VTypedObject *", "deleted native object");
    SWIG_fail;
  }
  
  VTypedObject_GetProperties(arg1,arg2);
  
  {
    if(arg2->HasFailed())
    {
      lua_Debug ar;
      lua_getstack(L, 1, &ar);
      lua_getinfo(L, "nSl", &ar);
      lua_pushfstring(L,"Error (%s:%d) in %s, %s", ar.source, ar.currentline, "VTypedObject_GetProperties", arg2->GetErrorMessage());
      SWIG_fail;
    }
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VTypedObject_SetProperty(lua_State* L) {
  int SWIG_arg = 0;
  VTypedObject *arg1 = (VTypedObject *) 0 ;
  char *arg2 = (char *) 0 ;
  VLuaStackRef *arg3 = 0 ;
  VCaptureSwigEnvironment *arg4 = (VCaptureSwigEnvironment *) 0 ;
  VLuaStackRef temp3(hkvNoInitialization) ;
  VCaptureSwigEnvironment temp4(L,SWIG_arg) ;
  
  {
    arg4 = &temp4;
  }
  SWIG_check_num_args("SetProperty",3,3)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetProperty",1,"VTypedObject *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetProperty",1,"VTypedObject *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetProperty",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VTypedObject,0))){
    SWIG_fail_ptr("VTypedObject_SetProperty",1,SWIGTYPE_p_VTypedObject);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    temp3 = VLuaStackRef(L, 3);
    arg3 = &temp3;
  }
  
  if (VTraits::IsBaseOf<VTypedObject, VTypedObject>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VTypedObject_SetProperty", 1, "VTypedObject *", "deleted native object");
    SWIG_fail;
  }
  
  VTypedObject_SetProperty(arg1,(char const *)arg2,(VLuaStackRef const &)*arg3,arg4);
  
  {
    if(arg4->HasFailed())
    {
      lua_Debug ar;
      lua_getstack(L, 1, &ar);
      lua_getinfo(L, "nSl", &ar);
      lua_pushfstring(L,"Error (%s:%d) in %s, %s", ar.source, ar.currentline, "VTypedObject_SetProperty", arg4->GetErrorMessage());
      SWIG_fail;
    }
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VTypedObject_GetNumProperties(lua_State* L) {
  int SWIG_arg = 0;
  VTypedObject *arg1 = (VTypedObject *) 0 ;
  int result;
  
  SWIG_check_num_args("GetNumVariables",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetNumVariables",1,"VTypedObject const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetNumVariables",1,"VTypedObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VTypedObject,0))){
    SWIG_fail_ptr("VTypedObject_GetNumProperties",1,SWIGTYPE_p_VTypedObject);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VTypedObject const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VTypedObject_GetNumProperties", 1, "VTypedObject const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (int)((VTypedObject const *)arg1)->GetNumVariables();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VTypedObject_UpdateProperty(lua_State* L) {
  int SWIG_arg = 0;
  VTypedObject *arg1 = (VTypedObject *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SetVariable",3,3)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetVariable",1,"VTypedObject *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetVariable",1,"VTypedObject *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetVariable",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SetVariable",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VTypedObject,0))){
    SWIG_fail_ptr("VTypedObject_UpdateProperty",1,SWIGTYPE_p_VTypedObject);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (VTraits::IsBaseOf<VTypedObject, VTypedObject>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VTypedObject_UpdateProperty", 1, "VTypedObject *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)(arg1)->SetVariable((char const *)arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_VTypedObject_methods[] = {
    { "__tostring",VTypedObject_ToString},
    { "__concat",VTypedObject_Concat},
    {"GetType", _wrap_VTypedObject_GetType}, 
    {"IsOfType", _wrap_VTypedObject_IsOfType}, 
    {"GetPropertyType", _wrap_VTypedObject_GetPropertyType}, 
    {"__eq", _wrap_VTypedObject___eq}, 
    {"GetProperty", _wrap_VTypedObject_GetProperty}, 
    {"GetProperties", _wrap_VTypedObject_GetProperties}, 
    {"SetProperty", _wrap_VTypedObject_SetProperty}, 
    {"GetNumProperties", _wrap_VTypedObject_GetNumProperties}, 
    {"UpdateProperty", _wrap_VTypedObject_UpdateProperty}, 
    {0,0}
};
static swig_lua_attribute swig_VTypedObject_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_VTypedObject_bases[] = {0};
static const char *swig_VTypedObject_base_names[] = {0};
static swig_lua_class _wrap_class_VTypedObject = { "VTypedObject", &SWIGTYPE_p_VTypedObject,0,0, swig_VTypedObject_methods, swig_VTypedObject_attributes, swig_VTypedObject_bases, swig_VTypedObject_base_names };

static int _wrap_VisTypedEngineObject_cl_GetComponentCount(lua_State* L) {
  int SWIG_arg = 0;
  VisTypedEngineObject_cl *arg1 = (VisTypedEngineObject_cl *) 0 ;
  int result;
  
  SWIG_check_num_args("GetComponentCount",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetComponentCount",1,"VisTypedEngineObject_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetComponentCount",1,"VisTypedEngineObject_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisTypedEngineObject_cl,0))){
    SWIG_fail_ptr("VisTypedEngineObject_cl_GetComponentCount",1,SWIGTYPE_p_VisTypedEngineObject_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisTypedEngineObject_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisTypedEngineObject_cl_GetComponentCount", 1, "VisTypedEngineObject_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (int)VisTypedEngineObject_cl_GetComponentCount(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisTypedEngineObject_cl_AddComponent(lua_State* L) {
  int SWIG_arg = 0;
  VisTypedEngineObject_cl *arg1 = (VisTypedEngineObject_cl *) 0 ;
  IVObjectComponent *arg2 = (IVObjectComponent *) 0 ;
  bool result;
  
  SWIG_check_num_args("AddComponent",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("AddComponent",1,"VisTypedEngineObject_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddComponent",1,"VisTypedEngineObject_cl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AddComponent",2,"IVObjectComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisTypedEngineObject_cl,0))){
    SWIG_fail_ptr("VisTypedEngineObject_cl_AddComponent",1,SWIGTYPE_p_VisTypedEngineObject_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IVObjectComponent,0))){
    SWIG_fail_ptr("VisTypedEngineObject_cl_AddComponent",2,SWIGTYPE_p_IVObjectComponent);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisTypedEngineObject_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisTypedEngineObject_cl_AddComponent", 1, "VisTypedEngineObject_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisTypedEngineObject_cl_AddComponent(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisTypedEngineObject_cl_RemoveComponent(lua_State* L) {
  int SWIG_arg = 0;
  VisTypedEngineObject_cl *arg1 = (VisTypedEngineObject_cl *) 0 ;
  IVObjectComponent *arg2 = (IVObjectComponent *) 0 ;
  bool result;
  
  SWIG_check_num_args("RemoveComponent",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("RemoveComponent",1,"VisTypedEngineObject_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RemoveComponent",1,"VisTypedEngineObject_cl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RemoveComponent",2,"IVObjectComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisTypedEngineObject_cl,0))){
    SWIG_fail_ptr("VisTypedEngineObject_cl_RemoveComponent",1,SWIGTYPE_p_VisTypedEngineObject_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IVObjectComponent,0))){
    SWIG_fail_ptr("VisTypedEngineObject_cl_RemoveComponent",2,SWIGTYPE_p_IVObjectComponent);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisTypedEngineObject_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisTypedEngineObject_cl_RemoveComponent", 1, "VisTypedEngineObject_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisTypedEngineObject_cl_RemoveComponent(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisTypedEngineObject_cl_RemoveComponentOfType__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  VisTypedEngineObject_cl *arg1 = (VisTypedEngineObject_cl *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("RemoveComponentOfType",3,3)
  if(lua_isnil(L, 1)) SWIG_fail_arg("RemoveComponentOfType",1,"VisTypedEngineObject_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RemoveComponentOfType",1,"VisTypedEngineObject_cl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("RemoveComponentOfType",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("RemoveComponentOfType",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisTypedEngineObject_cl,0))){
    SWIG_fail_ptr("VisTypedEngineObject_cl_RemoveComponentOfType",1,SWIGTYPE_p_VisTypedEngineObject_cl);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (VTraits::IsBaseOf<VTypedObject, VisTypedEngineObject_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisTypedEngineObject_cl_RemoveComponentOfType", 1, "VisTypedEngineObject_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisTypedEngineObject_cl_RemoveComponentOfType__SWIG_0(arg1,(char const *)arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisTypedEngineObject_cl_RemoveComponentOfType__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  VisTypedEngineObject_cl *arg1 = (VisTypedEngineObject_cl *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("RemoveComponentOfType",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("RemoveComponentOfType",1,"VisTypedEngineObject_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RemoveComponentOfType",1,"VisTypedEngineObject_cl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("RemoveComponentOfType",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisTypedEngineObject_cl,0))){
    SWIG_fail_ptr("VisTypedEngineObject_cl_RemoveComponentOfType",1,SWIGTYPE_p_VisTypedEngineObject_cl);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, VisTypedEngineObject_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisTypedEngineObject_cl_RemoveComponentOfType", 1, "VisTypedEngineObject_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisTypedEngineObject_cl_RemoveComponentOfType__SWIG_0(arg1,(char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisTypedEngineObject_cl_RemoveComponentOfType(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisTypedEngineObject_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_VisTypedEngineObject_cl_RemoveComponentOfType__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisTypedEngineObject_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_VisTypedEngineObject_cl_RemoveComponentOfType__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VisTypedEngineObject_cl_RemoveComponentOfType'\n"
    "  Possible C/C++ prototypes are:\n"
    "    RemoveComponentOfType(VisTypedEngineObject_cl *,char const *,char const *)\n"
    "    RemoveComponentOfType(VisTypedEngineObject_cl *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_VisTypedEngineObject_cl_RemoveAllComponents(lua_State* L) {
  int SWIG_arg = 0;
  VisTypedEngineObject_cl *arg1 = (VisTypedEngineObject_cl *) 0 ;
  
  SWIG_check_num_args("RemoveAllComponents",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("RemoveAllComponents",1,"VisTypedEngineObject_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RemoveAllComponents",1,"VisTypedEngineObject_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisTypedEngineObject_cl,0))){
    SWIG_fail_ptr("VisTypedEngineObject_cl_RemoveAllComponents",1,SWIGTYPE_p_VisTypedEngineObject_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisTypedEngineObject_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisTypedEngineObject_cl_RemoveAllComponents", 1, "VisTypedEngineObject_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->RemoveAllComponents();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_VisTypedEngineObject_cl_methods[] = {
    { "__tostring",VisTypedEngineObject_cl_ToString},
    { "GetComponentOfType",VisTypedEngineObject_cl_GetComponentOfType},
    { "GetComponentOfBaseType",VisTypedEngineObject_cl_GetComponentOfBaseType},
    { "GetComponentAt",VisTypedEngineObject_cl_GetComponentAt},
    { "__concat",VisTypedEngineObject_cl_Concat},
    { "AddTriggerTarget",VisTypedEngineObject_cl_AddTriggerTarget},
    { "AddTriggerSource",VisTypedEngineObject_cl_AddTriggerSource},
    { "AddTransitionStateMachine",VisTypedEngineObject_cl_AddTransitionStateMachine},
    { "AddTimedValue",VisTypedEngineObject_cl_AddTimedValue},
    { "AddComponentOfType",VisTypedEngineObject_cl_AddComponentOfType},
    { "AddAnimation",VisTypedEngineObject_cl_AddAnimation},
    {"GetComponentCount", _wrap_VisTypedEngineObject_cl_GetComponentCount}, 
    {"AddComponent", _wrap_VisTypedEngineObject_cl_AddComponent}, 
    {"RemoveComponent", _wrap_VisTypedEngineObject_cl_RemoveComponent}, 
    {"RemoveComponentOfType", _wrap_VisTypedEngineObject_cl_RemoveComponentOfType}, 
    {"RemoveAllComponents", _wrap_VisTypedEngineObject_cl_RemoveAllComponents}, 
    {0,0}
};
static swig_lua_attribute swig_VisTypedEngineObject_cl_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_VisTypedEngineObject_cl_bases[] = {0,0};
static const char *swig_VisTypedEngineObject_cl_base_names[] = {"VTypedObject *",0};
static swig_lua_class _wrap_class_VisTypedEngineObject_cl = { "VisTypedEngineObject_cl", &SWIGTYPE_p_VisTypedEngineObject_cl,0,0, swig_VisTypedEngineObject_cl_methods, swig_VisTypedEngineObject_cl_attributes, swig_VisTypedEngineObject_cl_bases, swig_VisTypedEngineObject_cl_base_names };

static int _wrap_IVObjectComponent_SetOwner(lua_State* L) {
  int SWIG_arg = 0;
  IVObjectComponent *arg1 = (IVObjectComponent *) 0 ;
  VisTypedEngineObject_cl *arg2 = (VisTypedEngineObject_cl *) 0 ;
  
  SWIG_check_num_args("SetOwner",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetOwner",1,"IVObjectComponent *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetOwner",1,"IVObjectComponent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SetOwner",2,"VisTypedEngineObject_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IVObjectComponent,0))){
    SWIG_fail_ptr("IVObjectComponent_SetOwner",1,SWIGTYPE_p_IVObjectComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VisTypedEngineObject_cl,0))){
    SWIG_fail_ptr("IVObjectComponent_SetOwner",2,SWIGTYPE_p_VisTypedEngineObject_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, IVObjectComponent>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "IVObjectComponent_SetOwner", 1, "IVObjectComponent *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetOwner(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVObjectComponent_GetOwner(lua_State* L) {
  int SWIG_arg = 0;
  IVObjectComponent *arg1 = (IVObjectComponent *) 0 ;
  VisTypedEngineObject_cl *result = 0 ;
  
  SWIG_check_num_args("GetOwner",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetOwner",1,"IVObjectComponent *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetOwner",1,"IVObjectComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IVObjectComponent,0))){
    SWIG_fail_ptr("IVObjectComponent_GetOwner",1,SWIGTYPE_p_IVObjectComponent);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, IVObjectComponent>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "IVObjectComponent_GetOwner", 1, "IVObjectComponent *", "deleted native object");
    SWIG_fail;
  }
  
  result = (VisTypedEngineObject_cl *)(arg1)->GetOwner();
  
  if(VTraits::IsBaseOf<VTypedObject, VisTypedEngineObject_cl>::value)
  {
    LUA_PushObjectProxy(L, (VTypedObject*)result); SWIG_arg++;
  }
  else
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_VisTypedEngineObject_cl,0); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVObjectComponent_GetComponentID(lua_State* L) {
  int SWIG_arg = 0;
  IVObjectComponent *arg1 = (IVObjectComponent *) 0 ;
  int result;
  
  SWIG_check_num_args("GetComponentID",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetComponentID",1,"IVObjectComponent const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetComponentID",1,"IVObjectComponent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IVObjectComponent,0))){
    SWIG_fail_ptr("IVObjectComponent_GetComponentID",1,SWIGTYPE_p_IVObjectComponent);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, IVObjectComponent const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "IVObjectComponent_GetComponentID", 1, "IVObjectComponent const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (int)((IVObjectComponent const *)arg1)->GetComponentID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVObjectComponent_GetComponentName(lua_State* L) {
  int SWIG_arg = 0;
  IVObjectComponent *arg1 = (IVObjectComponent *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetComponentName",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetComponentName",1,"IVObjectComponent *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetComponentName",1,"IVObjectComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IVObjectComponent,0))){
    SWIG_fail_ptr("IVObjectComponent_GetComponentName",1,SWIGTYPE_p_IVObjectComponent);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, IVObjectComponent>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "IVObjectComponent_GetComponentName", 1, "IVObjectComponent *", "deleted native object");
    SWIG_fail;
  }
  
  result = (char *)(arg1)->GetComponentName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVObjectComponent_SetComponentID(lua_State* L) {
  int SWIG_arg = 0;
  IVObjectComponent *arg1 = (IVObjectComponent *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SetComponentID",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetComponentID",1,"IVObjectComponent *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetComponentID",1,"IVObjectComponent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetComponentID",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IVObjectComponent,0))){
    SWIG_fail_ptr("IVObjectComponent_SetComponentID",1,SWIGTYPE_p_IVObjectComponent);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, IVObjectComponent>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "IVObjectComponent_SetComponentID", 1, "IVObjectComponent *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetComponentID(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVObjectComponent_SetComponentName(lua_State* L) {
  int SWIG_arg = 0;
  IVObjectComponent *arg1 = (IVObjectComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("SetComponentName",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetComponentName",1,"IVObjectComponent *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetComponentName",1,"IVObjectComponent *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetComponentName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IVObjectComponent,0))){
    SWIG_fail_ptr("IVObjectComponent_SetComponentName",1,SWIGTYPE_p_IVObjectComponent);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, IVObjectComponent>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "IVObjectComponent_SetComponentName", 1, "IVObjectComponent *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetComponentName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVObjectComponent_CanAttachToObject(lua_State* L) {
  int SWIG_arg = 0;
  IVObjectComponent *arg1 = (IVObjectComponent *) 0 ;
  VisTypedEngineObject_cl *arg2 = (VisTypedEngineObject_cl *) 0 ;
  bool result;
  
  SWIG_check_num_args("CanAttachToObject",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("CanAttachToObject",1,"IVObjectComponent *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CanAttachToObject",1,"IVObjectComponent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CanAttachToObject",2,"VisTypedEngineObject_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IVObjectComponent,0))){
    SWIG_fail_ptr("IVObjectComponent_CanAttachToObject",1,SWIGTYPE_p_IVObjectComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VisTypedEngineObject_cl,0))){
    SWIG_fail_ptr("IVObjectComponent_CanAttachToObject",2,SWIGTYPE_p_VisTypedEngineObject_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, IVObjectComponent>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "IVObjectComponent_CanAttachToObject", 1, "IVObjectComponent *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)IVObjectComponent_CanAttachToObject(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_IVObjectComponent_methods[] = {
    { "__tostring",IVObjectComponent_ToString},
    { "__concat",IVObjectComponent_Concat},
    {"SetOwner", _wrap_IVObjectComponent_SetOwner}, 
    {"GetOwner", _wrap_IVObjectComponent_GetOwner}, 
    {"GetComponentID", _wrap_IVObjectComponent_GetComponentID}, 
    {"GetComponentName", _wrap_IVObjectComponent_GetComponentName}, 
    {"SetComponentID", _wrap_IVObjectComponent_SetComponentID}, 
    {"SetComponentName", _wrap_IVObjectComponent_SetComponentName}, 
    {"CanAttachToObject", _wrap_IVObjectComponent_CanAttachToObject}, 
    {0,0}
};
static swig_lua_attribute swig_IVObjectComponent_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_IVObjectComponent_bases[] = {0,0};
static const char *swig_IVObjectComponent_base_names[] = {"VisTypedEngineObject_cl *",0};
static swig_lua_class _wrap_class_IVObjectComponent = { "IVObjectComponent", &SWIGTYPE_p_IVObjectComponent,0,0, swig_IVObjectComponent_methods, swig_IVObjectComponent_attributes, swig_IVObjectComponent_bases, swig_IVObjectComponent_base_names };

static int _wrap_VisObjectKey_cl_SetKey(lua_State* L) {
  int SWIG_arg = 0;
  VisObjectKey_cl *arg1 = (VisObjectKey_cl *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("SetObjectKey",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetObjectKey",1,"VisObjectKey_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetObjectKey",1,"VisObjectKey_cl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetObjectKey",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObjectKey_cl,0))){
    SWIG_fail_ptr("VisObjectKey_cl_SetKey",1,SWIGTYPE_p_VisObjectKey_cl);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, VisObjectKey_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObjectKey_cl_SetKey", 1, "VisObjectKey_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetObjectKey((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObjectKey_cl_GetKey(lua_State* L) {
  int SWIG_arg = 0;
  VisObjectKey_cl *arg1 = (VisObjectKey_cl *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetObjectKey",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetObjectKey",1,"VisObjectKey_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetObjectKey",1,"VisObjectKey_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObjectKey_cl,0))){
    SWIG_fail_ptr("VisObjectKey_cl_GetKey",1,SWIGTYPE_p_VisObjectKey_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObjectKey_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObjectKey_cl_GetKey", 1, "VisObjectKey_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (char *)((VisObjectKey_cl const *)arg1)->GetObjectKey();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObjectKey_cl_HasKey__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  VisObjectKey_cl *arg1 = (VisObjectKey_cl *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("HasKey",3,3)
  if(lua_isnil(L, 1)) SWIG_fail_arg("HasKey",1,"VisObjectKey_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("HasKey",1,"VisObjectKey_cl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("HasKey",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("HasKey",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObjectKey_cl,0))){
    SWIG_fail_ptr("VisObjectKey_cl_HasKey",1,SWIGTYPE_p_VisObjectKey_cl);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  
  if (VTraits::IsBaseOf<VTypedObject, VisObjectKey_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObjectKey_cl_HasKey", 1, "VisObjectKey_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisObjectKey_cl_HasKey__SWIG_0(arg1,(char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObjectKey_cl_HasKey__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  VisObjectKey_cl *arg1 = (VisObjectKey_cl *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("HasKey",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("HasKey",1,"VisObjectKey_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("HasKey",1,"VisObjectKey_cl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("HasKey",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObjectKey_cl,0))){
    SWIG_fail_ptr("VisObjectKey_cl_HasKey",1,SWIGTYPE_p_VisObjectKey_cl);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, VisObjectKey_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObjectKey_cl_HasKey", 1, "VisObjectKey_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisObjectKey_cl_HasKey__SWIG_0(arg1,(char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObjectKey_cl_HasKey(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisObjectKey_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_VisObjectKey_cl_HasKey__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisObjectKey_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_VisObjectKey_cl_HasKey__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VisObjectKey_cl_HasKey'\n"
    "  Possible C/C++ prototypes are:\n"
    "    HasKey(VisObjectKey_cl *,char const *,bool)\n"
    "    HasKey(VisObjectKey_cl *,char const *)\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_VisObjectKey_cl_methods[] = {
    {"SetKey", _wrap_VisObjectKey_cl_SetKey}, 
    {"GetKey", _wrap_VisObjectKey_cl_GetKey}, 
    {"HasKey", _wrap_VisObjectKey_cl_HasKey}, 
    {0,0}
};
static swig_lua_attribute swig_VisObjectKey_cl_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_VisObjectKey_cl_bases[] = {0};
static const char *swig_VisObjectKey_cl_base_names[] = {0};
static swig_lua_class _wrap_class_VisObjectKey_cl = { "VisObjectKey_cl", &SWIGTYPE_p_VisObjectKey_cl,0,0, swig_VisObjectKey_cl_methods, swig_VisObjectKey_cl_attributes, swig_VisObjectKey_cl_bases, swig_VisObjectKey_cl_base_names };

static int _wrap_VisObject3D_cl_SetPosition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 *arg2 = 0 ;
  
  SWIG_check_num_args("SetPosition",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetPosition",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetPosition",1,"VisObject3D_cl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetPosition",2,"hkvVec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetPosition",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_hkvVec3,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetPosition",2,SWIGTYPE_p_hkvVec3);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_SetPosition", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetPosition((hkvVec3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_IncPosition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 *arg2 = 0 ;
  
  SWIG_check_num_args("IncPosition",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("IncPosition",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IncPosition",1,"VisObject3D_cl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("IncPosition",2,"hkvVec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_IncPosition",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_hkvVec3,0))){
    SWIG_fail_ptr("VisObject3D_cl_IncPosition",2,SWIGTYPE_p_hkvVec3);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_IncPosition", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->IncPosition((hkvVec3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_GetPosition(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 result;
  
  SWIG_check_num_args("GetPosition",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetPosition",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetPosition",1,"VisObject3D_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_GetPosition",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_GetPosition", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = VisObject3D_cl_GetPosition(arg1);
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_hkvVec3); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_SetPosition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("SetPosition",4,4)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetPosition",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetPosition",1,"VisObject3D_cl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetPosition",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetPosition",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetPosition",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetPosition",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_SetPosition", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  VisObject3D_cl_SetPosition__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_SetPosition(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisObject3D_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_hkvVec3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VisObject3D_cl_SetPosition__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisObject3D_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_VisObject3D_cl_SetPosition__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VisObject3D_cl_SetPosition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SetPosition(VisObject3D_cl *,hkvVec3 const &)\n"
    "    SetPosition(VisObject3D_cl *,float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_VisObject3D_cl_IncPosition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("IncPosition",4,4)
  if(lua_isnil(L, 1)) SWIG_fail_arg("IncPosition",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IncPosition",1,"VisObject3D_cl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IncPosition",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("IncPosition",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("IncPosition",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_IncPosition",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_IncPosition", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  VisObject3D_cl_IncPosition__SWIG_1(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_IncPosition(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisObject3D_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_hkvVec3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VisObject3D_cl_IncPosition__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisObject3D_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_VisObject3D_cl_IncPosition__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VisObject3D_cl_IncPosition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    IncPosition(VisObject3D_cl *,hkvVec3 const &)\n"
    "    IncPosition(VisObject3D_cl *,float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_VisObject3D_cl_SetOrientation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("SetOrientation",4,4)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetOrientation",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetOrientation",1,"VisObject3D_cl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetOrientation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetOrientation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetOrientation",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetOrientation",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_SetOrientation", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  VisObject3D_cl_SetOrientation__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_IncOrientation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("IncOrientation",4,4)
  if(lua_isnil(L, 1)) SWIG_fail_arg("IncOrientation",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IncOrientation",1,"VisObject3D_cl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IncOrientation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("IncOrientation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("IncOrientation",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_IncOrientation",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_IncOrientation", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  VisObject3D_cl_IncOrientation__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_SetUseEulerAngles(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SetUseEulerAngles",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetUseEulerAngles",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetUseEulerAngles",1,"VisObject3D_cl *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SetUseEulerAngles",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetUseEulerAngles",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_SetUseEulerAngles", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  VisObject3D_cl_SetUseEulerAngles(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_GetUseEulerAngles(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  bool result;
  
  SWIG_check_num_args("GetUseEulerAngles",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetUseEulerAngles",1,"VisObject3D_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetUseEulerAngles",1,"VisObject3D_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_GetUseEulerAngles",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_GetUseEulerAngles", 1, "VisObject3D_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisObject3D_cl_GetUseEulerAngles((VisObject3D_cl const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_TransformToObjectSpace(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 *arg2 = 0 ;
  hkvVec3 result;
  
  SWIG_check_num_args("TransformToObjectSpace",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("TransformToObjectSpace",1,"VisObject3D_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TransformToObjectSpace",1,"VisObject3D_cl const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TransformToObjectSpace",2,"hkvVec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_TransformToObjectSpace",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_hkvVec3,0))){
    SWIG_fail_ptr("VisObject3D_cl_TransformToObjectSpace",2,SWIGTYPE_p_hkvVec3);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_TransformToObjectSpace", 1, "VisObject3D_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = ((VisObject3D_cl const *)arg1)->TransformToObjectSpace((hkvVec3 const &)*arg2);
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_hkvVec3); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_SetOrientation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 *arg2 = 0 ;
  
  SWIG_check_num_args("SetOrientation",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetOrientation",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetOrientation",1,"VisObject3D_cl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetOrientation",2,"hkvVec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetOrientation",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_hkvVec3,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetOrientation",2,SWIGTYPE_p_hkvVec3);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_SetOrientation", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetOrientation((hkvVec3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_SetOrientation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisObject3D_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_hkvVec3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VisObject3D_cl_SetOrientation__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisObject3D_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_VisObject3D_cl_SetOrientation__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VisObject3D_cl_SetOrientation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SetOrientation(VisObject3D_cl *,float,float,float)\n"
    "    SetOrientation(VisObject3D_cl *,hkvVec3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_VisObject3D_cl_IncOrientation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 *arg2 = 0 ;
  
  SWIG_check_num_args("IncOrientation",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("IncOrientation",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IncOrientation",1,"VisObject3D_cl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("IncOrientation",2,"hkvVec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_IncOrientation",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_hkvVec3,0))){
    SWIG_fail_ptr("VisObject3D_cl_IncOrientation",2,SWIGTYPE_p_hkvVec3);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_IncOrientation", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->IncOrientation((hkvVec3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_IncOrientation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisObject3D_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_hkvVec3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VisObject3D_cl_IncOrientation__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisObject3D_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_VisObject3D_cl_IncOrientation__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VisObject3D_cl_IncOrientation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    IncOrientation(VisObject3D_cl *,float,float,float)\n"
    "    IncOrientation(VisObject3D_cl *,hkvVec3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_VisObject3D_cl_GetOrientation(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 result;
  
  SWIG_check_num_args("GetActualOrientation",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetActualOrientation",1,"VisObject3D_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetActualOrientation",1,"VisObject3D_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_GetOrientation",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_GetOrientation", 1, "VisObject3D_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = ((VisObject3D_cl const *)arg1)->GetActualOrientation();
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_hkvVec3); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_SetRotationMatrix(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvMat3 *arg2 = 0 ;
  
  SWIG_check_num_args("SetRotationMatrix",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetRotationMatrix",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetRotationMatrix",1,"VisObject3D_cl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetRotationMatrix",2,"hkvMat3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetRotationMatrix",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_hkvMat3,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetRotationMatrix",2,SWIGTYPE_p_hkvMat3);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_SetRotationMatrix", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetRotationMatrix((hkvMat3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_GetRotationMatrix(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvMat3 result;
  
  SWIG_check_num_args("GetRotationMatrix",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetRotationMatrix",1,"VisObject3D_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetRotationMatrix",1,"VisObject3D_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_GetRotationMatrix",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_GetRotationMatrix", 1, "VisObject3D_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = ((VisObject3D_cl const *)arg1)->GetRotationMatrix();
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_hkvMat3); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_GetTransposedRotationMatrix(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvMat3 result;
  
  SWIG_check_num_args("GetTransposedRotationMatrix",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetTransposedRotationMatrix",1,"VisObject3D_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetTransposedRotationMatrix",1,"VisObject3D_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_GetTransposedRotationMatrix",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_GetTransposedRotationMatrix", 1, "VisObject3D_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = ((VisObject3D_cl const *)arg1)->GetTransposedRotationMatrix();
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_hkvMat3); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_GetDirection(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 result;
  
  SWIG_check_num_args("GetDirection",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetDirection",1,"VisObject3D_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetDirection",1,"VisObject3D_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_GetDirection",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_GetDirection", 1, "VisObject3D_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = ((VisObject3D_cl const *)arg1)->GetDirection();
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_hkvVec3); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_SetDirection(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 *arg2 = 0 ;
  
  SWIG_check_num_args("SetDirection",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetDirection",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetDirection",1,"VisObject3D_cl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetDirection",2,"hkvVec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetDirection",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_hkvVec3,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetDirection",2,SWIGTYPE_p_hkvVec3);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_SetDirection", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetDirection((hkvVec3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_AttachToParent(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  VisObject3D_cl *arg2 = (VisObject3D_cl *) 0 ;
  
  SWIG_check_num_args("AttachToParent",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("AttachToParent",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AttachToParent",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AttachToParent",2,"VisObject3D_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_AttachToParent",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_AttachToParent",2,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_AttachToParent", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->AttachToParent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_DetachFromParent(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  
  SWIG_check_num_args("DetachFromParent",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("DetachFromParent",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DetachFromParent",1,"VisObject3D_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_DetachFromParent",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_DetachFromParent", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->DetachFromParent();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_GetNumChildren(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  int result;
  
  SWIG_check_num_args("GetNumChildren",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetNumChildren",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetNumChildren",1,"VisObject3D_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_GetNumChildren",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_GetNumChildren", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (int)(arg1)->GetNumChildren();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_SetLocalPosition(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 *arg2 = 0 ;
  
  SWIG_check_num_args("SetLocalPosition",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetLocalPosition",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetLocalPosition",1,"VisObject3D_cl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetLocalPosition",2,"hkvVec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetLocalPosition",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_hkvVec3,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetLocalPosition",2,SWIGTYPE_p_hkvVec3);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_SetLocalPosition", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetLocalPosition((hkvVec3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_GetLocalPosition(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 result;
  
  SWIG_check_num_args("GetLocalPosition",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetLocalPosition",1,"VisObject3D_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetLocalPosition",1,"VisObject3D_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_GetLocalPosition",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_GetLocalPosition", 1, "VisObject3D_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = ((VisObject3D_cl const *)arg1)->GetLocalPosition();
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_hkvVec3); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_SetLocalOrientation(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 *arg2 = 0 ;
  
  SWIG_check_num_args("SetLocalOrientation",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetLocalOrientation",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetLocalOrientation",1,"VisObject3D_cl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetLocalOrientation",2,"hkvVec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetLocalOrientation",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_hkvVec3,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetLocalOrientation",2,SWIGTYPE_p_hkvVec3);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_SetLocalOrientation", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetLocalOrientation((hkvVec3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_GetLocalOrientation(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 result;
  
  SWIG_check_num_args("GetLocalOrientation",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetLocalOrientation",1,"VisObject3D_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetLocalOrientation",1,"VisObject3D_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_GetLocalOrientation",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_GetLocalOrientation", 1, "VisObject3D_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = ((VisObject3D_cl const *)arg1)->GetLocalOrientation();
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_hkvVec3); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_ResetLocalTransformation(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  
  SWIG_check_num_args("ResetLocalTransformation",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("ResetLocalTransformation",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ResetLocalTransformation",1,"VisObject3D_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_ResetLocalTransformation",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_ResetLocalTransformation", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->ResetLocalTransformation();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_SetMotionDeltaWorldSpace(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 *arg2 = 0 ;
  
  SWIG_check_num_args("SetMotionDeltaWorldSpace",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetMotionDeltaWorldSpace",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetMotionDeltaWorldSpace",1,"VisObject3D_cl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetMotionDeltaWorldSpace",2,"hkvVec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetMotionDeltaWorldSpace",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_hkvVec3,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetMotionDeltaWorldSpace",2,SWIGTYPE_p_hkvVec3);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_SetMotionDeltaWorldSpace", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetMotionDeltaWorldSpace((hkvVec3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_SetMotionDeltaLocalSpace(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 *arg2 = 0 ;
  
  SWIG_check_num_args("SetMotionDeltaLocalSpace",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetMotionDeltaLocalSpace",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetMotionDeltaLocalSpace",1,"VisObject3D_cl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetMotionDeltaLocalSpace",2,"hkvVec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetMotionDeltaLocalSpace",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_hkvVec3,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetMotionDeltaLocalSpace",2,SWIGTYPE_p_hkvVec3);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_SetMotionDeltaLocalSpace", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetMotionDeltaLocalSpace((hkvVec3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_IncMotionDeltaWorldSpace(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 *arg2 = 0 ;
  
  SWIG_check_num_args("IncMotionDeltaWorldSpace",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("IncMotionDeltaWorldSpace",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IncMotionDeltaWorldSpace",1,"VisObject3D_cl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("IncMotionDeltaWorldSpace",2,"hkvVec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_IncMotionDeltaWorldSpace",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_hkvVec3,0))){
    SWIG_fail_ptr("VisObject3D_cl_IncMotionDeltaWorldSpace",2,SWIGTYPE_p_hkvVec3);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_IncMotionDeltaWorldSpace", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->IncMotionDeltaWorldSpace((hkvVec3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_IncMotionDeltaLocalSpace(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 *arg2 = 0 ;
  
  SWIG_check_num_args("IncMotionDeltaLocalSpace",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("IncMotionDeltaLocalSpace",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IncMotionDeltaLocalSpace",1,"VisObject3D_cl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("IncMotionDeltaLocalSpace",2,"hkvVec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_IncMotionDeltaLocalSpace",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_hkvVec3,0))){
    SWIG_fail_ptr("VisObject3D_cl_IncMotionDeltaLocalSpace",2,SWIGTYPE_p_hkvVec3);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_IncMotionDeltaLocalSpace", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->IncMotionDeltaLocalSpace((hkvVec3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_GetMotionDeltaWorldSpace(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 result;
  
  SWIG_check_num_args("GetMotionDeltaWorldSpace",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetMotionDeltaWorldSpace",1,"VisObject3D_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMotionDeltaWorldSpace",1,"VisObject3D_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_GetMotionDeltaWorldSpace",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_GetMotionDeltaWorldSpace", 1, "VisObject3D_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = VisObject3D_cl_GetMotionDeltaWorldSpace((VisObject3D_cl const *)arg1);
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_hkvVec3); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_GetMotionDeltaLocalSpace(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 result;
  
  SWIG_check_num_args("GetMotionDeltaLocalSpace",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetMotionDeltaLocalSpace",1,"VisObject3D_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMotionDeltaLocalSpace",1,"VisObject3D_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_GetMotionDeltaLocalSpace",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_GetMotionDeltaLocalSpace", 1, "VisObject3D_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = VisObject3D_cl_GetMotionDeltaLocalSpace((VisObject3D_cl const *)arg1);
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_hkvVec3); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_HasRotationDelta(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  bool result;
  
  SWIG_check_num_args("HasRotationDelta",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("HasRotationDelta",1,"VisObject3D_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("HasRotationDelta",1,"VisObject3D_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_HasRotationDelta",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_HasRotationDelta", 1, "VisObject3D_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisObject3D_cl_HasRotationDelta((VisObject3D_cl const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_GetRotationDelta(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 result;
  
  SWIG_check_num_args("GetRotationDelta",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetRotationDelta",1,"VisObject3D_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetRotationDelta",1,"VisObject3D_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_GetRotationDelta",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_GetRotationDelta", 1, "VisObject3D_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = VisObject3D_cl_GetRotationDelta((VisObject3D_cl const *)arg1);
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_hkvVec3); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_ResetMotionDeltaLocalSpace(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  
  SWIG_check_num_args("ResetMotionDeltaLocalSpace",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("ResetMotionDeltaLocalSpace",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ResetMotionDeltaLocalSpace",1,"VisObject3D_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_ResetMotionDeltaLocalSpace",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_ResetMotionDeltaLocalSpace", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->ResetMotionDeltaLocalSpace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_ResetMotionDeltaWorldSpace(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  
  SWIG_check_num_args("ResetMotionDeltaWorldSpace",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("ResetMotionDeltaWorldSpace",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ResetMotionDeltaWorldSpace",1,"VisObject3D_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_ResetMotionDeltaWorldSpace",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_ResetMotionDeltaWorldSpace", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->ResetMotionDeltaWorldSpace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_ResetMotionDelta(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  
  SWIG_check_num_args("ResetMotionDelta",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("ResetMotionDelta",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ResetMotionDelta",1,"VisObject3D_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_ResetMotionDelta",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_ResetMotionDelta", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->ResetMotionDelta();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_SetRotationDelta(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 *arg2 = 0 ;
  
  SWIG_check_num_args("SetRotationDelta",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetRotationDelta",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetRotationDelta",1,"VisObject3D_cl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetRotationDelta",2,"hkvVec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetRotationDelta",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_hkvVec3,0))){
    SWIG_fail_ptr("VisObject3D_cl_SetRotationDelta",2,SWIGTYPE_p_hkvVec3);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_SetRotationDelta", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetRotationDelta((hkvVec3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_IncRotationDelta(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 *arg2 = 0 ;
  
  SWIG_check_num_args("IncRotationDelta",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("IncRotationDelta",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IncRotationDelta",1,"VisObject3D_cl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("IncRotationDelta",2,"hkvVec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_IncRotationDelta",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_hkvVec3,0))){
    SWIG_fail_ptr("VisObject3D_cl_IncRotationDelta",2,SWIGTYPE_p_hkvVec3);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_IncRotationDelta", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->IncRotationDelta((hkvVec3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_ResetRotationDelta(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  
  SWIG_check_num_args("ResetRotationDelta",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("ResetRotationDelta",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ResetRotationDelta",1,"VisObject3D_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_ResetRotationDelta",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_ResetRotationDelta", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->ResetRotationDelta();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_GetObjDir(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 result;
  
  SWIG_check_num_args("GetObjDir",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetObjDir",1,"VisObject3D_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetObjDir",1,"VisObject3D_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_GetObjDir",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_GetObjDir", 1, "VisObject3D_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = ((VisObject3D_cl const *)arg1)->GetObjDir();
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_hkvVec3); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_GetObjDir_Right(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 result;
  
  SWIG_check_num_args("GetObjDir_Right",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetObjDir_Right",1,"VisObject3D_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetObjDir_Right",1,"VisObject3D_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_GetObjDir_Right",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_GetObjDir_Right", 1, "VisObject3D_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = ((VisObject3D_cl const *)arg1)->GetObjDir_Right();
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_hkvVec3); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_GetObjDir_Up(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  hkvVec3 result;
  
  SWIG_check_num_args("GetObjDir_Up",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetObjDir_Up",1,"VisObject3D_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetObjDir_Up",1,"VisObject3D_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_GetObjDir_Up",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_GetObjDir_Up", 1, "VisObject3D_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = ((VisObject3D_cl const *)arg1)->GetObjDir_Up();
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_hkvVec3); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisObject3D_cl_GetParent(lua_State* L) {
  int SWIG_arg = 0;
  VisObject3D_cl *arg1 = (VisObject3D_cl *) 0 ;
  VisObject3D_cl *result = 0 ;
  
  SWIG_check_num_args("GetParent",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetParent",1,"VisObject3D_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetParent",1,"VisObject3D_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisObject3D_cl,0))){
    SWIG_fail_ptr("VisObject3D_cl_GetParent",1,SWIGTYPE_p_VisObject3D_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisObject3D_cl_GetParent", 1, "VisObject3D_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (VisObject3D_cl *)(arg1)->GetParent();
  
  if(VTraits::IsBaseOf<VTypedObject, VisObject3D_cl>::value)
  {
    LUA_PushObjectProxy(L, (VTypedObject*)result); SWIG_arg++;
  }
  else
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_VisObject3D_cl,0); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_VisObject3D_cl_methods[] = {
    { "__tostring",VisObject3D_cl_ToString},
    { "GetChild",VisObject3D_cl_GetChild},
    { "__concat",VisObject3D_cl_Concat},
    {"GetPosition", _wrap_VisObject3D_cl_GetPosition}, 
    {"SetPosition", _wrap_VisObject3D_cl_SetPosition}, 
    {"IncPosition", _wrap_VisObject3D_cl_IncPosition}, 
    {"SetUseEulerAngles", _wrap_VisObject3D_cl_SetUseEulerAngles}, 
    {"GetUseEulerAngles", _wrap_VisObject3D_cl_GetUseEulerAngles}, 
    {"TransformToObjectSpace", _wrap_VisObject3D_cl_TransformToObjectSpace}, 
    {"SetOrientation", _wrap_VisObject3D_cl_SetOrientation}, 
    {"IncOrientation", _wrap_VisObject3D_cl_IncOrientation}, 
    {"GetOrientation", _wrap_VisObject3D_cl_GetOrientation}, 
    {"SetRotationMatrix", _wrap_VisObject3D_cl_SetRotationMatrix}, 
    {"GetRotationMatrix", _wrap_VisObject3D_cl_GetRotationMatrix}, 
    {"GetTransposedRotationMatrix", _wrap_VisObject3D_cl_GetTransposedRotationMatrix}, 
    {"GetDirection", _wrap_VisObject3D_cl_GetDirection}, 
    {"SetDirection", _wrap_VisObject3D_cl_SetDirection}, 
    {"AttachToParent", _wrap_VisObject3D_cl_AttachToParent}, 
    {"DetachFromParent", _wrap_VisObject3D_cl_DetachFromParent}, 
    {"GetNumChildren", _wrap_VisObject3D_cl_GetNumChildren}, 
    {"SetLocalPosition", _wrap_VisObject3D_cl_SetLocalPosition}, 
    {"GetLocalPosition", _wrap_VisObject3D_cl_GetLocalPosition}, 
    {"SetLocalOrientation", _wrap_VisObject3D_cl_SetLocalOrientation}, 
    {"GetLocalOrientation", _wrap_VisObject3D_cl_GetLocalOrientation}, 
    {"ResetLocalTransformation", _wrap_VisObject3D_cl_ResetLocalTransformation}, 
    {"SetMotionDeltaWorldSpace", _wrap_VisObject3D_cl_SetMotionDeltaWorldSpace}, 
    {"SetMotionDeltaLocalSpace", _wrap_VisObject3D_cl_SetMotionDeltaLocalSpace}, 
    {"IncMotionDeltaWorldSpace", _wrap_VisObject3D_cl_IncMotionDeltaWorldSpace}, 
    {"IncMotionDeltaLocalSpace", _wrap_VisObject3D_cl_IncMotionDeltaLocalSpace}, 
    {"GetMotionDeltaWorldSpace", _wrap_VisObject3D_cl_GetMotionDeltaWorldSpace}, 
    {"GetMotionDeltaLocalSpace", _wrap_VisObject3D_cl_GetMotionDeltaLocalSpace}, 
    {"HasRotationDelta", _wrap_VisObject3D_cl_HasRotationDelta}, 
    {"GetRotationDelta", _wrap_VisObject3D_cl_GetRotationDelta}, 
    {"ResetMotionDeltaLocalSpace", _wrap_VisObject3D_cl_ResetMotionDeltaLocalSpace}, 
    {"ResetMotionDeltaWorldSpace", _wrap_VisObject3D_cl_ResetMotionDeltaWorldSpace}, 
    {"ResetMotionDelta", _wrap_VisObject3D_cl_ResetMotionDelta}, 
    {"SetRotationDelta", _wrap_VisObject3D_cl_SetRotationDelta}, 
    {"IncRotationDelta", _wrap_VisObject3D_cl_IncRotationDelta}, 
    {"ResetRotationDelta", _wrap_VisObject3D_cl_ResetRotationDelta}, 
    {"GetObjDir", _wrap_VisObject3D_cl_GetObjDir}, 
    {"GetObjDir_Right", _wrap_VisObject3D_cl_GetObjDir_Right}, 
    {"GetObjDir_Up", _wrap_VisObject3D_cl_GetObjDir_Up}, 
    {"GetParent", _wrap_VisObject3D_cl_GetParent}, 
    {0,0}
};
static swig_lua_attribute swig_VisObject3D_cl_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_VisObject3D_cl_bases[] = {0,0,0};
static const char *swig_VisObject3D_cl_base_names[] = {"VisTypedEngineObject_cl *","VisObjectKey_cl *",0};
static swig_lua_class _wrap_class_VisObject3D_cl = { "VisObject3D_cl", &SWIGTYPE_p_VisObject3D_cl,0,0, swig_VisObject3D_cl_methods, swig_VisObject3D_cl_attributes, swig_VisObject3D_cl_bases, swig_VisObject3D_cl_base_names };

static int _wrap_VisBaseEntity_cl_Remove(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  
  SWIG_check_num_args("Remove",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("Remove",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Remove",1,"VisBaseEntity_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_Remove",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_Remove", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->Remove();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_InitFunction(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  
  SWIG_check_num_args("InitFunction",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("InitFunction",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InitFunction",1,"VisBaseEntity_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_InitFunction",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_InitFunction", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->InitFunction();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_DeInitFunction(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  
  SWIG_check_num_args("DeInitFunction",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("DeInitFunction",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeInitFunction",1,"VisBaseEntity_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_DeInitFunction",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_DeInitFunction", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->DeInitFunction();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_GetMesh(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  VDynamicMesh *result = 0 ;
  
  SWIG_check_num_args("GetMesh",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetMesh",1,"VisBaseEntity_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetMesh",1,"VisBaseEntity_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_GetMesh",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_GetMesh", 1, "VisBaseEntity_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (VDynamicMesh *)((VisBaseEntity_cl const *)arg1)->GetMesh();
  
  if(VTraits::IsBaseOf<VTypedObject, VDynamicMesh>::value)
  {
    LUA_PushObjectProxy(L, (VTypedObject*)result); SWIG_arg++;
  }
  else
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_VDynamicMesh,0); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetMesh__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SetMesh",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetMesh",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetMesh",1,"VisBaseEntity_cl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetMesh",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetMesh",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetMesh", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetMesh__SWIG_0(arg1,(char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetMesh__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  VDynamicMesh *arg2 = (VDynamicMesh *) 0 ;
  bool result;
  
  SWIG_check_num_args("SetMesh",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetMesh",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetMesh",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SetMesh",2,"VDynamicMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetMesh",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VDynamicMesh,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetMesh",2,SWIGTYPE_p_VDynamicMesh);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetMesh", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetMesh__SWIG_1(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetMesh(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_VDynamicMesh, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VisBaseEntity_cl_SetMesh__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_VisBaseEntity_cl_SetMesh__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VisBaseEntity_cl_SetMesh'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SetMesh(VisBaseEntity_cl *,char const *)\n"
    "    SetMesh(VisBaseEntity_cl *,VDynamicMesh *)\n");
  lua_error(L);return 0;
}


static int _wrap_VisBaseEntity_cl_SetThinkFunctionStatus(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SetThinkFunctionStatus",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetThinkFunctionStatus",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetThinkFunctionStatus",1,"VisBaseEntity_cl *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SetThinkFunctionStatus",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetThinkFunctionStatus",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetThinkFunctionStatus", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  VisBaseEntity_cl_SetThinkFunctionStatus(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_GetThinkFunctionStatus(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  bool result;
  
  SWIG_check_num_args("GetThinkFunctionStatus",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetThinkFunctionStatus",1,"VisBaseEntity_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetThinkFunctionStatus",1,"VisBaseEntity_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_GetThinkFunctionStatus",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_GetThinkFunctionStatus", 1, "VisBaseEntity_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_GetThinkFunctionStatus((VisBaseEntity_cl const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_HasMesh(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  bool result;
  
  SWIG_check_num_args("HasMesh",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("HasMesh",1,"VisBaseEntity_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("HasMesh",1,"VisBaseEntity_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_HasMesh",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_HasMesh", 1, "VisBaseEntity_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_HasMesh((VisBaseEntity_cl const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetCastShadows(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SetCastShadows",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetCastShadows",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetCastShadows",1,"VisBaseEntity_cl *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SetCastShadows",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetCastShadows",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetCastShadows", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  VisBaseEntity_cl_SetCastShadows(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_GetCastShadows(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  bool result;
  
  SWIG_check_num_args("GetCastShadows",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetCastShadows",1,"VisBaseEntity_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetCastShadows",1,"VisBaseEntity_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_GetCastShadows",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_GetCastShadows", 1, "VisBaseEntity_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_GetCastShadows((VisBaseEntity_cl const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetScaling__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  float arg2 ;
  bool result;
  
  SWIG_check_num_args("SetScaling",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetScaling",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetScaling",1,"VisBaseEntity_cl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetScaling",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetScaling",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetScaling", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetScaling__SWIG_0(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetScaling__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  SWIG_check_num_args("SetScaling",4,4)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetScaling",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetScaling",1,"VisBaseEntity_cl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetScaling",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetScaling",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetScaling",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetScaling",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetScaling", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetScaling__SWIG_1(arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetScaling__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  hkvVec3 *arg2 = (hkvVec3 *) 0 ;
  bool result;
  
  SWIG_check_num_args("SetScaling",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetScaling",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetScaling",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SetScaling",2,"hkvVec3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetScaling",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_hkvVec3,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetScaling",2,SWIGTYPE_p_hkvVec3);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetScaling", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetScaling__SWIG_2(arg1,(hkvVec3 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetScaling(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_hkvVec3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VisBaseEntity_cl_SetScaling__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VisBaseEntity_cl_SetScaling__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_VisBaseEntity_cl_SetScaling__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VisBaseEntity_cl_SetScaling'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SetScaling(VisBaseEntity_cl *,float)\n"
    "    SetScaling(VisBaseEntity_cl *,float,float,float)\n"
    "    SetScaling(VisBaseEntity_cl *,hkvVec3 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_VisBaseEntity_cl_GetScaling(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  hkvVec3 result;
  
  SWIG_check_num_args("GetScaling",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetScaling",1,"VisBaseEntity_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetScaling",1,"VisBaseEntity_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_GetScaling",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_GetScaling", 1, "VisBaseEntity_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = VisBaseEntity_cl_GetScaling((VisBaseEntity_cl const *)arg1);
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_hkvVec3); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetAlwaysInForeGround__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SetAlwaysInForeGround",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetAlwaysInForeGround",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetAlwaysInForeGround",1,"VisBaseEntity_cl *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SetAlwaysInForeGround",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetAlwaysInForeGround",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetAlwaysInForeGround", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetAlwaysInForeGround(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetAlwaysInForeGround__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  
  SWIG_check_num_args("SetAlwaysInForeGround",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetAlwaysInForeGround",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetAlwaysInForeGround",1,"VisBaseEntity_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetAlwaysInForeGround",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetAlwaysInForeGround", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetAlwaysInForeGround();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetAlwaysInForeGround(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_VisBaseEntity_cl_SetAlwaysInForeGround__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_VisBaseEntity_cl_SetAlwaysInForeGround__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VisBaseEntity_cl_SetAlwaysInForeGround'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SetAlwaysInForeGround(VisBaseEntity_cl *,bool)\n"
    "    SetAlwaysInForeGround(VisBaseEntity_cl *)\n");
  lua_error(L);return 0;
}


static int _wrap_VisBaseEntity_cl_IsObjectAlwaysInForegroundEnabled(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  bool result;
  
  SWIG_check_num_args("IsObjectAlwaysInForegroundEnabled",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("IsObjectAlwaysInForegroundEnabled",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IsObjectAlwaysInForegroundEnabled",1,"VisBaseEntity_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_IsObjectAlwaysInForegroundEnabled",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_IsObjectAlwaysInForegroundEnabled", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)(arg1)->IsObjectAlwaysInForegroundEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetCastStaticShadows(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SetCastStaticShadows",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetCastStaticShadows",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetCastStaticShadows",1,"VisBaseEntity_cl *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SetCastStaticShadows",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetCastStaticShadows",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetCastStaticShadows", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetCastStaticShadows(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_GetCastStaticShadows(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  bool result;
  
  SWIG_check_num_args("GetCastStaticShadows",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetCastStaticShadows",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetCastStaticShadows",1,"VisBaseEntity_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_GetCastStaticShadows",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_GetCastStaticShadows", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)(arg1)->GetCastStaticShadows();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetCustomTraceBBox(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  hkvAlignedBBox *arg2 = (hkvAlignedBBox *) 0 ;
  
  SWIG_check_num_args("SetCustomTraceBBox",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetCustomTraceBBox",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetCustomTraceBBox",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SetCustomTraceBBox",2,"hkvAlignedBBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetCustomTraceBBox",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_hkvAlignedBBox,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetCustomTraceBBox",2,SWIGTYPE_p_hkvAlignedBBox);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetCustomTraceBBox", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetCustomTraceBBox((hkvAlignedBBox const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_GetCustomTraceBBox(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  hkvAlignedBBox result;
  
  SWIG_check_num_args("GetCustomTraceBBox",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetCustomTraceBBox",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetCustomTraceBBox",1,"VisBaseEntity_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_GetCustomTraceBBox",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_GetCustomTraceBBox", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = VisBaseEntity_cl_GetCustomTraceBBox(arg1);
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_hkvAlignedBBox); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetTraceAccuracy(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SetTraceAccuracy",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetTraceAccuracy",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetTraceAccuracy",1,"VisBaseEntity_cl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetTraceAccuracy",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTraceAccuracy",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetTraceAccuracy", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  VisBaseEntity_cl_SetTraceAccuracy(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_WasVisibleInLastFrame(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  bool result;
  
  SWIG_check_num_args("WasVisibleInLastFrame",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("WasVisibleInLastFrame",1,"VisBaseEntity_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WasVisibleInLastFrame",1,"VisBaseEntity_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_WasVisibleInLastFrame",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_WasVisibleInLastFrame", 1, "VisBaseEntity_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_WasVisibleInLastFrame((VisBaseEntity_cl const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_WasVisibleInAnyLastFrame(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  bool result;
  
  SWIG_check_num_args("WasVisibleInAnyLastFrame",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("WasVisibleInAnyLastFrame",1,"VisBaseEntity_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WasVisibleInAnyLastFrame",1,"VisBaseEntity_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_WasVisibleInAnyLastFrame",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_WasVisibleInAnyLastFrame", 1, "VisBaseEntity_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_WasVisibleInAnyLastFrame((VisBaseEntity_cl const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_GetBoundingBox(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  hkvAlignedBBox result;
  
  SWIG_check_num_args("GetBoundingBox",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetBoundingBox",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetBoundingBox",1,"VisBaseEntity_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_GetBoundingBox",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_GetBoundingBox", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = VisBaseEntity_cl_GetBoundingBox(arg1);
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_hkvAlignedBBox); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_GetCollisionBoundingBox(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  hkvAlignedBBox result;
  
  SWIG_check_num_args("GetCollisionBoundingBox",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetCollisionBoundingBox",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetCollisionBoundingBox",1,"VisBaseEntity_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_GetCollisionBoundingBox",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_GetCollisionBoundingBox", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = VisBaseEntity_cl_GetCollisionBoundingBox(arg1);
  
  SWIG_Lua_NewPodObj(L,&result,SWIGTYPE_p_hkvAlignedBBox); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetVisible(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SetVisible",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetVisible",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetVisible",1,"VisBaseEntity_cl *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SetVisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetVisible",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetVisible", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  VisBaseEntity_cl_SetVisible(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_IsVisible(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  bool result;
  
  SWIG_check_num_args("IsVisible",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("IsVisible",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IsVisible",1,"VisBaseEntity_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_IsVisible",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_IsVisible", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_IsVisible(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetVisibleBitmask(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  VBitmask *arg2 = (VBitmask *) 0 ;
  
  SWIG_check_num_args("SetVisibleBitmask",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetVisibleBitmask",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetVisibleBitmask",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SetVisibleBitmask",2,"VBitmask *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetVisibleBitmask",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VBitmask,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetVisibleBitmask",2,SWIGTYPE_p_VBitmask);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetVisibleBitmask", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  VisBaseEntity_cl_SetVisibleBitmask(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_GetVisibleBitmask(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  VBitmask result;
  
  SWIG_check_num_args("GetVisibleBitmask",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetVisibleBitmask",1,"VisBaseEntity_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetVisibleBitmask",1,"VisBaseEntity_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_GetVisibleBitmask",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_GetVisibleBitmask", 1, "VisBaseEntity_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = VisBaseEntity_cl_GetVisibleBitmask((VisBaseEntity_cl const *)arg1);
  {
    VBitmask * resultptr = new VBitmask((const VBitmask &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_VBitmask,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetLightInfluenceBitmask(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  VBitmask *arg2 = (VBitmask *) 0 ;
  
  SWIG_check_num_args("SetLightInfluenceBitmask",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetLightInfluenceBitmask",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetLightInfluenceBitmask",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SetLightInfluenceBitmask",2,"VBitmask *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetLightInfluenceBitmask",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VBitmask,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetLightInfluenceBitmask",2,SWIGTYPE_p_VBitmask);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetLightInfluenceBitmask", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  VisBaseEntity_cl_SetLightInfluenceBitmask(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_GetLightInfluenceBitmask(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  VBitmask result;
  
  SWIG_check_num_args("GetLightInfluenceBitmask",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetLightInfluenceBitmask",1,"VisBaseEntity_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetLightInfluenceBitmask",1,"VisBaseEntity_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_GetLightInfluenceBitmask",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_GetLightInfluenceBitmask", 1, "VisBaseEntity_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = VisBaseEntity_cl_GetLightInfluenceBitmask((VisBaseEntity_cl const *)arg1);
  {
    VBitmask * resultptr = new VBitmask((const VBitmask &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_VBitmask,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetEffectForAllSurfaces__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SetEffectForAllSurfaces",4,4)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetEffectForAllSurfaces",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetEffectForAllSurfaces",1,"VisBaseEntity_cl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetEffectForAllSurfaces",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SetEffectForAllSurfaces",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("SetEffectForAllSurfaces",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetEffectForAllSurfaces",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffectForAllSurfaces", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetEffectForAllSurfaces__SWIG_0(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetEffectForAllSurfaces__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SetEffectForAllSurfaces",3,3)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetEffectForAllSurfaces",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetEffectForAllSurfaces",1,"VisBaseEntity_cl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetEffectForAllSurfaces",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SetEffectForAllSurfaces",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetEffectForAllSurfaces",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffectForAllSurfaces", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetEffectForAllSurfaces__SWIG_0(arg1,(char const *)arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetEffectForAllSurfaces__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  VMap< VString,VString > *arg4 = 0 ;
  VMap< VString,VString > temp4 ;
  bool result;
  
  SWIG_check_num_args("SetEffectForAllSurfaces",4,4)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetEffectForAllSurfaces",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetEffectForAllSurfaces",1,"VisBaseEntity_cl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetEffectForAllSurfaces",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SetEffectForAllSurfaces",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetEffectForAllSurfaces",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  arg4 = &temp4;
  lua_pushnil(L);
  while(lua_next(L, 4) != 0)
  {
    if(!lua_isstring(L, -2))
    {
      SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffectForAllSurfaces", 4, "table of string keys", "table entry with non-string key");
      SWIG_fail;
    }
    
    if(!lua_isstring(L, -1))
    {
      SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffectForAllSurfaces", 4, "table of string values", "table entry with non-string value");
      SWIG_fail;
    }
    
    // Duplicate key because lua_tostring changes the value on the stack, confusing lua_next
    lua_pushvalue(L, -2);
    (*arg4)[lua_tostring(L, -1)] = lua_tostring(L, -2);
    lua_pop(L, 2);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffectForAllSurfaces", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetEffectForAllSurfaces__SWIG_2(arg1,(char const *)arg2,(char const *)arg3,(VMap< VString,VString > const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetEffectForAllSurfaces(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_VisBaseEntity_cl_SetEffectForAllSurfaces__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_istable(L, 4);
          }
          if (_v) {
            return _wrap_VisBaseEntity_cl_SetEffectForAllSurfaces__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_VisBaseEntity_cl_SetEffectForAllSurfaces__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VisBaseEntity_cl_SetEffectForAllSurfaces'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SetEffectForAllSurfaces(VisBaseEntity_cl *,char const *,char const *,char const *)\n"
    "    SetEffectForAllSurfaces(VisBaseEntity_cl *,char const *,char const *)\n"
    "    SetEffectForAllSurfaces(VisBaseEntity_cl *,char const *,char const *,VMap< VString,VString > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_VisBaseEntity_cl_SetEffect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  VisSurface_cl *arg2 = (VisSurface_cl *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SetEffect",5,5)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetEffect",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetEffect",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SetEffect",2,"VisSurface_cl *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SetEffect",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("SetEffect",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("SetEffect",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetEffect",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VisSurface_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetEffect",2,SWIGTYPE_p_VisSurface_cl);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffect", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetEffect__SWIG_0(arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetEffect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  VisSurface_cl *arg2 = (VisSurface_cl *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SetEffect",4,4)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetEffect",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetEffect",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SetEffect",2,"VisSurface_cl *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SetEffect",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("SetEffect",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetEffect",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VisSurface_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetEffect",2,SWIGTYPE_p_VisSurface_cl);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffect", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetEffect__SWIG_0(arg1,arg2,(char const *)arg3,(char const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetEffect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SetEffect",5,5)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetEffect",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetEffect",1,"VisBaseEntity_cl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetEffect",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SetEffect",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("SetEffect",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("SetEffect",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetEffect",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffect", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetEffect__SWIG_2(arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetEffect__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SetEffect",4,4)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetEffect",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetEffect",1,"VisBaseEntity_cl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetEffect",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SetEffect",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("SetEffect",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetEffect",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffect", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetEffect__SWIG_2(arg1,arg2,(char const *)arg3,(char const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetEffect__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SetEffect",5,5)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetEffect",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetEffect",1,"VisBaseEntity_cl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetEffect",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SetEffect",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("SetEffect",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("SetEffect",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetEffect",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffect", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetEffect__SWIG_4(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetEffect__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SetEffect",4,4)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetEffect",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetEffect",1,"VisBaseEntity_cl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetEffect",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SetEffect",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("SetEffect",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetEffect",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffect", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetEffect__SWIG_4(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetEffect__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  VisSurface_cl *arg2 = (VisSurface_cl *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  VMap< VString,VString > *arg5 = 0 ;
  VMap< VString,VString > temp5 ;
  bool result;
  
  SWIG_check_num_args("SetEffect",5,5)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetEffect",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetEffect",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SetEffect",2,"VisSurface_cl *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SetEffect",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("SetEffect",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetEffect",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VisSurface_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetEffect",2,SWIGTYPE_p_VisSurface_cl);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  arg5 = &temp5;
  lua_pushnil(L);
  while(lua_next(L, 5) != 0)
  {
    if(!lua_isstring(L, -2))
    {
      SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffect", 5, "table of string keys", "table entry with non-string key");
      SWIG_fail;
    }
    
    if(!lua_isstring(L, -1))
    {
      SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffect", 5, "table of string values", "table entry with non-string value");
      SWIG_fail;
    }
    
    // Duplicate key because lua_tostring changes the value on the stack, confusing lua_next
    lua_pushvalue(L, -2);
    (*arg5)[lua_tostring(L, -1)] = lua_tostring(L, -2);
    lua_pop(L, 2);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffect", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetEffect__SWIG_6(arg1,arg2,(char const *)arg3,(char const *)arg4,(VMap< VString,VString > const &)*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetEffect__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  VMap< VString,VString > *arg5 = 0 ;
  VMap< VString,VString > temp5 ;
  bool result;
  
  SWIG_check_num_args("SetEffect",5,5)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetEffect",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetEffect",1,"VisBaseEntity_cl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetEffect",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SetEffect",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("SetEffect",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetEffect",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  arg5 = &temp5;
  lua_pushnil(L);
  while(lua_next(L, 5) != 0)
  {
    if(!lua_isstring(L, -2))
    {
      SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffect", 5, "table of string keys", "table entry with non-string key");
      SWIG_fail;
    }
    
    if(!lua_isstring(L, -1))
    {
      SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffect", 5, "table of string values", "table entry with non-string value");
      SWIG_fail;
    }
    
    // Duplicate key because lua_tostring changes the value on the stack, confusing lua_next
    lua_pushvalue(L, -2);
    (*arg5)[lua_tostring(L, -1)] = lua_tostring(L, -2);
    lua_pop(L, 2);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffect", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetEffect__SWIG_7(arg1,arg2,(char const *)arg3,(char const *)arg4,(VMap< VString,VString > const &)*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetEffect__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  VMap< VString,VString > *arg5 = 0 ;
  VMap< VString,VString > temp5 ;
  bool result;
  
  SWIG_check_num_args("SetEffect",5,5)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetEffect",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetEffect",1,"VisBaseEntity_cl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetEffect",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SetEffect",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("SetEffect",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetEffect",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  arg5 = &temp5;
  lua_pushnil(L);
  while(lua_next(L, 5) != 0)
  {
    if(!lua_isstring(L, -2))
    {
      SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffect", 5, "table of string keys", "table entry with non-string key");
      SWIG_fail;
    }
    
    if(!lua_isstring(L, -1))
    {
      SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffect", 5, "table of string values", "table entry with non-string value");
      SWIG_fail;
    }
    
    // Duplicate key because lua_tostring changes the value on the stack, confusing lua_next
    lua_pushvalue(L, -2);
    (*arg5)[lua_tostring(L, -1)] = lua_tostring(L, -2);
    lua_pop(L, 2);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetEffect", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetEffect__SWIG_8(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(VMap< VString,VString > const &)*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetEffect(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_VisSurface_cl, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_VisBaseEntity_cl_SetEffect__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_VisBaseEntity_cl_SetEffect__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_VisBaseEntity_cl_SetEffect__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_VisSurface_cl, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_istable(L, 5);
            }
            if (_v) {
              return _wrap_VisBaseEntity_cl_SetEffect__SWIG_6(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_VisSurface_cl, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_VisBaseEntity_cl_SetEffect__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_istable(L, 5);
            }
            if (_v) {
              return _wrap_VisBaseEntity_cl_SetEffect__SWIG_7(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_VisBaseEntity_cl_SetEffect__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_istable(L, 5);
            }
            if (_v) {
              return _wrap_VisBaseEntity_cl_SetEffect__SWIG_8(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_VisBaseEntity_cl_SetEffect__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VisBaseEntity_cl_SetEffect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SetEffect(VisBaseEntity_cl *,VisSurface_cl *,char const *,char const *,char const *)\n"
    "    SetEffect(VisBaseEntity_cl *,VisSurface_cl *,char const *,char const *)\n"
    "    SetEffect(VisBaseEntity_cl *,int,char const *,char const *,char const *)\n"
    "    SetEffect(VisBaseEntity_cl *,int,char const *,char const *)\n"
    "    SetEffect(VisBaseEntity_cl *,char const *,char const *,char const *,char const *)\n"
    "    SetEffect(VisBaseEntity_cl *,char const *,char const *,char const *)\n"
    "    SetEffect(VisBaseEntity_cl *,VisSurface_cl *,char const *,char const *,VMap< VString,VString > const &)\n"
    "    SetEffect(VisBaseEntity_cl *,int,char const *,char const *,VMap< VString,VString > const &)\n"
    "    SetEffect(VisBaseEntity_cl *,char const *,char const *,char const *,VMap< VString,VString > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_VisBaseEntity_cl_RemoveCustomTextureSet(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  bool result;
  
  SWIG_check_num_args("RemoveCustomTextureSet",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("RemoveCustomTextureSet",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RemoveCustomTextureSet",1,"VisBaseEntity_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_RemoveCustomTextureSet",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_RemoveCustomTextureSet", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_RemoveCustomTextureSet(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_GetEffectParams__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  VMap< VString,VString > *arg2 = 0 ;
  int arg3 ;
  VMap< VString,VString > temp2 ;
  VString key2 ;
  VString value2 ;
  VPOSITION pos2 ;
  
  
  arg2 = &temp2;
  
  SWIG_check_num_args("GetEffectParams",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetEffectParams",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetEffectParams",1,"VisBaseEntity_cl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetEffectParams",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_GetEffectParams",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg3 = (int)lua_tonumber(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_GetEffectParams", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  VisBaseEntity_cl_GetEffectParams__SWIG_0(arg1,*arg2,arg3);
  
  
  lua_createtable(L, 0, arg2->GetCount());
  
  pos2 = arg2->GetStartPosition();
  while(pos2)
  {
    arg2->GetNextPair(pos2, key2, value2);
    lua_pushstring(L, value2);
    lua_setfield(L, -2, key2);
  }
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_GetEffectParams__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  VMap< VString,VString > *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  VMap< VString,VString > temp2 ;
  VString key2 ;
  VString value2 ;
  VPOSITION pos2 ;
  
  
  arg2 = &temp2;
  
  SWIG_check_num_args("GetEffectParams",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetEffectParams",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetEffectParams",1,"VisBaseEntity_cl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("GetEffectParams",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_GetEffectParams",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg3 = (char *)lua_tostring(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_GetEffectParams", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  VisBaseEntity_cl_GetEffectParams__SWIG_1(arg1,*arg2,(char const *)arg3);
  
  
  lua_createtable(L, 0, arg2->GetCount());
  
  pos2 = arg2->GetStartPosition();
  while(pos2)
  {
    arg2->GetNextPair(pos2, key2, value2);
    lua_pushstring(L, value2);
    lua_setfield(L, -2, key2);
  }
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_GetEffectParams__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  VMap< VString,VString > *arg2 = 0 ;
  VisSurface_cl *arg3 = (VisSurface_cl *) 0 ;
  VMap< VString,VString > temp2 ;
  VString key2 ;
  VString value2 ;
  VPOSITION pos2 ;
  
  
  arg2 = &temp2;
  
  SWIG_check_num_args("GetEffectParams",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetEffectParams",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetEffectParams",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GetEffectParams",2,"VisSurface_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_GetEffectParams",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg3,SWIGTYPE_p_VisSurface_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_GetEffectParams",3,SWIGTYPE_p_VisSurface_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_GetEffectParams", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  VisBaseEntity_cl_GetEffectParams__SWIG_2(arg1,*arg2,arg3);
  
  
  lua_createtable(L, 0, arg2->GetCount());
  
  pos2 = arg2->GetStartPosition();
  while(pos2)
  {
    arg2->GetNextPair(pos2, key2, value2);
    lua_pushstring(L, value2);
    lua_setfield(L, -2, key2);
  }
  SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_GetEffectParams(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_VisSurface_cl, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VisBaseEntity_cl_GetEffectParams__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VisBaseEntity_cl_GetEffectParams__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_VisBaseEntity_cl_GetEffectParams__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VisBaseEntity_cl_GetEffectParams'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GetEffectParams(VisBaseEntity_cl *,VMap< VString,VString > &,int)\n"
    "    GetEffectParams(VisBaseEntity_cl *,VMap< VString,VString > &,char const *)\n"
    "    GetEffectParams(VisBaseEntity_cl *,VMap< VString,VString > &,VisSurface_cl *)\n");
  lua_error(L);return 0;
}


static int _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  VTextureObject *arg2 = (VTextureObject *) 0 ;
  VisSurface_cl *arg3 = (VisSurface_cl *) 0 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("SetTextureForSurface",4,4)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SetTextureForSurface",2,"VTextureObject *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SetTextureForSurface",3,"VisSurface_cl *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetTextureForSurface",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VTextureObject,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",2,SWIGTYPE_p_VTextureObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_VisSurface_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",3,SWIGTYPE_p_VisSurface_cl);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetTextureForSurface", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetTextureForSurface__SWIG_0(arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  VTextureObject *arg2 = (VTextureObject *) 0 ;
  VisSurface_cl *arg3 = (VisSurface_cl *) 0 ;
  bool result;
  
  SWIG_check_num_args("SetTextureForSurface",3,3)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SetTextureForSurface",2,"VTextureObject *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SetTextureForSurface",3,"VisSurface_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VTextureObject,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",2,SWIGTYPE_p_VTextureObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_VisSurface_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",3,SWIGTYPE_p_VisSurface_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetTextureForSurface", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetTextureForSurface__SWIG_0(arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  VTextureObject *arg2 = (VTextureObject *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("SetTextureForSurface",4,4)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SetTextureForSurface",2,"VTextureObject *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SetTextureForSurface",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetTextureForSurface",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VTextureObject,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",2,SWIGTYPE_p_VTextureObject);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetTextureForSurface", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetTextureForSurface__SWIG_2(arg1,arg2,(char const *)arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  VTextureObject *arg2 = (VTextureObject *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SetTextureForSurface",3,3)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SetTextureForSurface",2,"VTextureObject *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SetTextureForSurface",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VTextureObject,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",2,SWIGTYPE_p_VTextureObject);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetTextureForSurface", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetTextureForSurface__SWIG_2(arg1,arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  VTextureObject *arg2 = (VTextureObject *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("SetTextureForSurface",4,4)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SetTextureForSurface",2,"VTextureObject *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetTextureForSurface",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetTextureForSurface",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VTextureObject,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",2,SWIGTYPE_p_VTextureObject);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetTextureForSurface", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetTextureForSurface__SWIG_4(arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  VTextureObject *arg2 = (VTextureObject *) 0 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("SetTextureForSurface",3,3)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SetTextureForSurface",2,"VTextureObject *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetTextureForSurface",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VTextureObject,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",2,SWIGTYPE_p_VTextureObject);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetTextureForSurface", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetTextureForSurface__SWIG_4(arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  char *arg2 = (char *) 0 ;
  VisSurface_cl *arg3 = (VisSurface_cl *) 0 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("SetTextureForSurface",4,4)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetTextureForSurface",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SetTextureForSurface",3,"VisSurface_cl *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetTextureForSurface",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_VisSurface_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",3,SWIGTYPE_p_VisSurface_cl);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetTextureForSurface", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetTextureForSurface__SWIG_6(arg1,(char const *)arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  char *arg2 = (char *) 0 ;
  VisSurface_cl *arg3 = (VisSurface_cl *) 0 ;
  bool result;
  
  SWIG_check_num_args("SetTextureForSurface",3,3)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetTextureForSurface",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SetTextureForSurface",3,"VisSurface_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_VisSurface_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",3,SWIGTYPE_p_VisSurface_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetTextureForSurface", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetTextureForSurface__SWIG_6(arg1,(char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("SetTextureForSurface",4,4)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetTextureForSurface",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SetTextureForSurface",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetTextureForSurface",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetTextureForSurface", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetTextureForSurface__SWIG_8(arg1,(char const *)arg2,(char const *)arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SetTextureForSurface",3,3)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetTextureForSurface",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SetTextureForSurface",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetTextureForSurface", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetTextureForSurface__SWIG_8(arg1,(char const *)arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("SetTextureForSurface",4,4)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetTextureForSurface",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetTextureForSurface",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetTextureForSurface",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetTextureForSurface", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetTextureForSurface__SWIG_10(arg1,(char const *)arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("SetTextureForSurface",3,3)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetTextureForSurface",1,"VisBaseEntity_cl *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetTextureForSurface",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetTextureForSurface",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetTextureForSurface",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetTextureForSurface", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)VisBaseEntity_cl_SetTextureForSurface__SWIG_10(arg1,(char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetTextureForSurface(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_VTextureObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_VisSurface_cl, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_VTextureObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_VTextureObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_VisSurface_cl, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_11(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_9(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_VTextureObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_VisSurface_cl, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_VTextureObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_VTextureObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_VisSurface_cl, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_6(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_10(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VisBaseEntity_cl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_VisBaseEntity_cl_SetTextureForSurface__SWIG_8(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VisBaseEntity_cl_SetTextureForSurface'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SetTextureForSurface(VisBaseEntity_cl *,VTextureObject *,VisSurface_cl *,int)\n"
    "    SetTextureForSurface(VisBaseEntity_cl *,VTextureObject *,VisSurface_cl *)\n"
    "    SetTextureForSurface(VisBaseEntity_cl *,VTextureObject *,char const *,int)\n"
    "    SetTextureForSurface(VisBaseEntity_cl *,VTextureObject *,char const *)\n"
    "    SetTextureForSurface(VisBaseEntity_cl *,VTextureObject *,int,int)\n"
    "    SetTextureForSurface(VisBaseEntity_cl *,VTextureObject *,int)\n"
    "    SetTextureForSurface(VisBaseEntity_cl *,char const *,VisSurface_cl *,int)\n"
    "    SetTextureForSurface(VisBaseEntity_cl *,char const *,VisSurface_cl *)\n"
    "    SetTextureForSurface(VisBaseEntity_cl *,char const *,char const *,int)\n"
    "    SetTextureForSurface(VisBaseEntity_cl *,char const *,char const *)\n"
    "    SetTextureForSurface(VisBaseEntity_cl *,char const *,int,int)\n"
    "    SetTextureForSurface(VisBaseEntity_cl *,char const *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_VisBaseEntity_cl_ClearShaderSet(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  
  SWIG_check_num_args("ClearShaderSet",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("ClearShaderSet",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClearShaderSet",1,"VisBaseEntity_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_ClearShaderSet",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_ClearShaderSet", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  VisBaseEntity_cl_ClearShaderSet(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetPrimarySortingKey(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SetPrimarySortingKey",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetPrimarySortingKey",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetPrimarySortingKey",1,"VisBaseEntity_cl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetPrimarySortingKey",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetPrimarySortingKey",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetPrimarySortingKey", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  VisBaseEntity_cl_SetPrimarySortingKey(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_GetPrimarySortingKey(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  int result;
  
  SWIG_check_num_args("GetPrimarySortingKey",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetPrimarySortingKey",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetPrimarySortingKey",1,"VisBaseEntity_cl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_GetPrimarySortingKey",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_GetPrimarySortingKey", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  result = (int)VisBaseEntity_cl_GetPrimarySortingKey(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_SetFarClipDistance(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SetFarClipDistance",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetFarClipDistance",1,"VisBaseEntity_cl *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetFarClipDistance",1,"VisBaseEntity_cl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetFarClipDistance",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_SetFarClipDistance",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_SetFarClipDistance", 1, "VisBaseEntity_cl *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetFarClipDistance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisBaseEntity_cl_GetFarClipDistance(lua_State* L) {
  int SWIG_arg = 0;
  VisBaseEntity_cl *arg1 = (VisBaseEntity_cl *) 0 ;
  float result;
  
  SWIG_check_num_args("GetFarClipDistance",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetFarClipDistance",1,"VisBaseEntity_cl const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetFarClipDistance",1,"VisBaseEntity_cl const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VisBaseEntity_cl,0))){
    SWIG_fail_ptr("VisBaseEntity_cl_GetFarClipDistance",1,SWIGTYPE_p_VisBaseEntity_cl);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, VisBaseEntity_cl const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "VisBaseEntity_cl_GetFarClipDistance", 1, "VisBaseEntity_cl const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (float)((VisBaseEntity_cl const *)arg1)->GetFarClipDistance();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_VisBaseEntity_cl_methods[] = {
    { "__tostring",VisBaseEntity_cl_ToString},
    { "__concat",VisBaseEntity_cl_Concat},
    {"Remove", _wrap_VisBaseEntity_cl_Remove}, 
    {"InitFunction", _wrap_VisBaseEntity_cl_InitFunction}, 
    {"DeInitFunction", _wrap_VisBaseEntity_cl_DeInitFunction}, 
    {"GetMesh", _wrap_VisBaseEntity_cl_GetMesh}, 
    {"SetMesh", _wrap_VisBaseEntity_cl_SetMesh}, 
    {"SetThinkFunctionStatus", _wrap_VisBaseEntity_cl_SetThinkFunctionStatus}, 
    {"GetThinkFunctionStatus", _wrap_VisBaseEntity_cl_GetThinkFunctionStatus}, 
    {"HasMesh", _wrap_VisBaseEntity_cl_HasMesh}, 
    {"SetCastShadows", _wrap_VisBaseEntity_cl_SetCastShadows}, 
    {"GetCastShadows", _wrap_VisBaseEntity_cl_GetCastShadows}, 
    {"SetScaling", _wrap_VisBaseEntity_cl_SetScaling}, 
    {"GetScaling", _wrap_VisBaseEntity_cl_GetScaling}, 
    {"SetAlwaysInForeGround", _wrap_VisBaseEntity_cl_SetAlwaysInForeGround}, 
    {"IsObjectAlwaysInForegroundEnabled", _wrap_VisBaseEntity_cl_IsObjectAlwaysInForegroundEnabled}, 
    {"SetCastStaticShadows", _wrap_VisBaseEntity_cl_SetCastStaticShadows}, 
    {"GetCastStaticShadows", _wrap_VisBaseEntity_cl_GetCastStaticShadows}, 
    {"SetCustomTraceBBox", _wrap_VisBaseEntity_cl_SetCustomTraceBBox}, 
    {"GetCustomTraceBBox", _wrap_VisBaseEntity_cl_GetCustomTraceBBox}, 
    {"SetTraceAccuracy", _wrap_VisBaseEntity_cl_SetTraceAccuracy}, 
    {"WasVisibleInLastFrame", _wrap_VisBaseEntity_cl_WasVisibleInLastFrame}, 
    {"WasVisibleInAnyLastFrame", _wrap_VisBaseEntity_cl_WasVisibleInAnyLastFrame}, 
    {"GetBoundingBox", _wrap_VisBaseEntity_cl_GetBoundingBox}, 
    {"GetCollisionBoundingBox", _wrap_VisBaseEntity_cl_GetCollisionBoundingBox}, 
    {"SetVisible", _wrap_VisBaseEntity_cl_SetVisible}, 
    {"IsVisible", _wrap_VisBaseEntity_cl_IsVisible}, 
    {"SetVisibleBitmask", _wrap_VisBaseEntity_cl_SetVisibleBitmask}, 
    {"GetVisibleBitmask", _wrap_VisBaseEntity_cl_GetVisibleBitmask}, 
    {"SetLightInfluenceBitmask", _wrap_VisBaseEntity_cl_SetLightInfluenceBitmask}, 
    {"GetLightInfluenceBitmask", _wrap_VisBaseEntity_cl_GetLightInfluenceBitmask}, 
    {"SetEffectForAllSurfaces", _wrap_VisBaseEntity_cl_SetEffectForAllSurfaces}, 
    {"SetEffect", _wrap_VisBaseEntity_cl_SetEffect}, 
    {"RemoveCustomTextureSet", _wrap_VisBaseEntity_cl_RemoveCustomTextureSet}, 
    {"GetEffectParams", _wrap_VisBaseEntity_cl_GetEffectParams}, 
    {"SetTextureForSurface", _wrap_VisBaseEntity_cl_SetTextureForSurface}, 
    {"ClearShaderSet", _wrap_VisBaseEntity_cl_ClearShaderSet}, 
    {"SetPrimarySortingKey", _wrap_VisBaseEntity_cl_SetPrimarySortingKey}, 
    {"GetPrimarySortingKey", _wrap_VisBaseEntity_cl_GetPrimarySortingKey}, 
    {"SetFarClipDistance", _wrap_VisBaseEntity_cl_SetFarClipDistance}, 
    {"GetFarClipDistance", _wrap_VisBaseEntity_cl_GetFarClipDistance}, 
    {0,0}
};
static swig_lua_attribute swig_VisBaseEntity_cl_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_VisBaseEntity_cl_bases[] = {0,0};
static const char *swig_VisBaseEntity_cl_base_names[] = {"VisObject3D_cl *",0};
static swig_lua_class _wrap_class_VisBaseEntity_cl = { "VisBaseEntity_cl", &SWIGTYPE_p_VisBaseEntity_cl,0,0, swig_VisBaseEntity_cl_methods, swig_VisBaseEntity_cl_attributes, swig_VisBaseEntity_cl_bases, swig_VisBaseEntity_cl_base_names };

static int _wrap_CloudConnectionClient_AddScriptCallbackListener__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CloudConnectionClient *arg1 = (CloudConnectionClient *) 0 ;
  VScriptInstance *arg2 = (VScriptInstance *) 0 ;
  
  SWIG_check_num_args("AddScriptCallbackListener",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("AddScriptCallbackListener",1,"CloudConnectionClient *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddScriptCallbackListener",1,"CloudConnectionClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AddScriptCallbackListener",2,"VScriptInstance *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CloudConnectionClient,0))){
    SWIG_fail_ptr("CloudConnectionClient_AddScriptCallbackListener",1,SWIGTYPE_p_CloudConnectionClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_VScriptInstance,0))){
    SWIG_fail_ptr("CloudConnectionClient_AddScriptCallbackListener",2,SWIGTYPE_p_VScriptInstance);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, CloudConnectionClient>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CloudConnectionClient_AddScriptCallbackListener", 1, "CloudConnectionClient *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->AddScriptCallbackListener(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloudConnectionClient_IsAuthenticated(lua_State* L) {
  int SWIG_arg = 0;
  CloudConnectionClient *arg1 = (CloudConnectionClient *) 0 ;
  bool result;
  
  SWIG_check_num_args("IsAuthenticated",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("IsAuthenticated",1,"CloudConnectionClient *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IsAuthenticated",1,"CloudConnectionClient *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CloudConnectionClient,0))){
    SWIG_fail_ptr("CloudConnectionClient_IsAuthenticated",1,SWIGTYPE_p_CloudConnectionClient);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, CloudConnectionClient>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CloudConnectionClient_IsAuthenticated", 1, "CloudConnectionClient *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)(arg1)->IsAuthenticated();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloudConnectionClient_SignOut(lua_State* L) {
  int SWIG_arg = 0;
  CloudConnectionClient *arg1 = (CloudConnectionClient *) 0 ;
  
  SWIG_check_num_args("SignOut",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SignOut",1,"CloudConnectionClient *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SignOut",1,"CloudConnectionClient *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CloudConnectionClient,0))){
    SWIG_fail_ptr("CloudConnectionClient_SignOut",1,SWIGTYPE_p_CloudConnectionClient);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, CloudConnectionClient>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CloudConnectionClient_SignOut", 1, "CloudConnectionClient *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SignOut();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloudConnectionClient_GetUserDisplayName(lua_State* L) {
  int SWIG_arg = 0;
  CloudConnectionClient *arg1 = (CloudConnectionClient *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetUserDisplayName",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetUserDisplayName",1,"CloudConnectionClient const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetUserDisplayName",1,"CloudConnectionClient const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CloudConnectionClient,0))){
    SWIG_fail_ptr("CloudConnectionClient_GetUserDisplayName",1,SWIGTYPE_p_CloudConnectionClient);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, CloudConnectionClient const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CloudConnectionClient_GetUserDisplayName", 1, "CloudConnectionClient const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (char *)((CloudConnectionClient const *)arg1)->GetUserDisplayName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloudConnectionClient_BeginUserInitiatedSignIn(lua_State* L) {
  int SWIG_arg = 0;
  CloudConnectionClient *arg1 = (CloudConnectionClient *) 0 ;
  
  SWIG_check_num_args("BeginUserInitiatedSignIn",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("BeginUserInitiatedSignIn",1,"CloudConnectionClient *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BeginUserInitiatedSignIn",1,"CloudConnectionClient *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CloudConnectionClient,0))){
    SWIG_fail_ptr("CloudConnectionClient_BeginUserInitiatedSignIn",1,SWIGTYPE_p_CloudConnectionClient);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, CloudConnectionClient>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CloudConnectionClient_BeginUserInitiatedSignIn", 1, "CloudConnectionClient *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->BeginUserInitiatedSignIn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloudConnectionClient_IsAuthInProgress(lua_State* L) {
  int SWIG_arg = 0;
  CloudConnectionClient *arg1 = (CloudConnectionClient *) 0 ;
  bool result;
  
  SWIG_check_num_args("IsAuthInProgress",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("IsAuthInProgress",1,"CloudConnectionClient *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IsAuthInProgress",1,"CloudConnectionClient *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CloudConnectionClient,0))){
    SWIG_fail_ptr("CloudConnectionClient_IsAuthInProgress",1,SWIGTYPE_p_CloudConnectionClient);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, CloudConnectionClient>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CloudConnectionClient_IsAuthInProgress", 1, "CloudConnectionClient *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)(arg1)->IsAuthInProgress();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloudConnectionClient_GetAchievement(lua_State* L) {
  int SWIG_arg = 0;
  CloudConnectionClient *arg1 = (CloudConnectionClient *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("GetAchievement",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetAchievement",1,"CloudConnectionClient *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetAchievement",1,"CloudConnectionClient *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("GetAchievement",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CloudConnectionClient,0))){
    SWIG_fail_ptr("CloudConnectionClient_GetAchievement",1,SWIGTYPE_p_CloudConnectionClient);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, CloudConnectionClient>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CloudConnectionClient_GetAchievement", 1, "CloudConnectionClient *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->GetAchievement((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloudConnectionClient_IncrementAchievement(lua_State* L) {
  int SWIG_arg = 0;
  CloudConnectionClient *arg1 = (CloudConnectionClient *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("IncrementAchievement",3,3)
  if(lua_isnil(L, 1)) SWIG_fail_arg("IncrementAchievement",1,"CloudConnectionClient *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IncrementAchievement",1,"CloudConnectionClient *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("IncrementAchievement",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("IncrementAchievement",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CloudConnectionClient,0))){
    SWIG_fail_ptr("CloudConnectionClient_IncrementAchievement",1,SWIGTYPE_p_CloudConnectionClient);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (VTraits::IsBaseOf<VTypedObject, CloudConnectionClient>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CloudConnectionClient_IncrementAchievement", 1, "CloudConnectionClient *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->IncrementAchievement((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloudConnectionClient_RevealAchievement(lua_State* L) {
  int SWIG_arg = 0;
  CloudConnectionClient *arg1 = (CloudConnectionClient *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("RevealAchievement",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("RevealAchievement",1,"CloudConnectionClient *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RevealAchievement",1,"CloudConnectionClient *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("RevealAchievement",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CloudConnectionClient,0))){
    SWIG_fail_ptr("CloudConnectionClient_RevealAchievement",1,SWIGTYPE_p_CloudConnectionClient);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, CloudConnectionClient>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CloudConnectionClient_RevealAchievement", 1, "CloudConnectionClient *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->RevealAchievement((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloudConnectionClient_SetAchievementStepsAtLeast(lua_State* L) {
  int SWIG_arg = 0;
  CloudConnectionClient *arg1 = (CloudConnectionClient *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("SetAchievementStepsAtLeast",3,3)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SetAchievementStepsAtLeast",1,"CloudConnectionClient *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SetAchievementStepsAtLeast",1,"CloudConnectionClient *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SetAchievementStepsAtLeast",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetAchievementStepsAtLeast",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CloudConnectionClient,0))){
    SWIG_fail_ptr("CloudConnectionClient_SetAchievementStepsAtLeast",1,SWIGTYPE_p_CloudConnectionClient);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (VTraits::IsBaseOf<VTypedObject, CloudConnectionClient>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CloudConnectionClient_SetAchievementStepsAtLeast", 1, "CloudConnectionClient *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SetAchievementStepsAtLeast((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloudConnectionClient_UnlockAchievement(lua_State* L) {
  int SWIG_arg = 0;
  CloudConnectionClient *arg1 = (CloudConnectionClient *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("UnlockAchievement",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("UnlockAchievement",1,"CloudConnectionClient *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnlockAchievement",1,"CloudConnectionClient *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UnlockAchievement",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CloudConnectionClient,0))){
    SWIG_fail_ptr("CloudConnectionClient_UnlockAchievement",1,SWIGTYPE_p_CloudConnectionClient);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, CloudConnectionClient>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CloudConnectionClient_UnlockAchievement", 1, "CloudConnectionClient *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->UnlockAchievement((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloudConnectionClient_ShowAchievements(lua_State* L) {
  int SWIG_arg = 0;
  CloudConnectionClient *arg1 = (CloudConnectionClient *) 0 ;
  
  SWIG_check_num_args("ShowAchievements",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("ShowAchievements",1,"CloudConnectionClient *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShowAchievements",1,"CloudConnectionClient *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CloudConnectionClient,0))){
    SWIG_fail_ptr("CloudConnectionClient_ShowAchievements",1,SWIGTYPE_p_CloudConnectionClient);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, CloudConnectionClient>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CloudConnectionClient_ShowAchievements", 1, "CloudConnectionClient *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->ShowAchievements();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloudConnectionClient_SubmitScore__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CloudConnectionClient *arg1 = (CloudConnectionClient *) 0 ;
  char *arg2 = (char *) 0 ;
  ULONG64 arg3 ;
  
  SWIG_check_num_args("SubmitScore",3,3)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SubmitScore",1,"CloudConnectionClient *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SubmitScore",1,"CloudConnectionClient *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SubmitScore",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SubmitScore",3,"ULONG64");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CloudConnectionClient,0))){
    SWIG_fail_ptr("CloudConnectionClient_SubmitScore",1,SWIGTYPE_p_CloudConnectionClient);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (ULONG64)lua_tonumber(L, 3);
  
  if (VTraits::IsBaseOf<VTypedObject, CloudConnectionClient>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CloudConnectionClient_SubmitScore", 1, "CloudConnectionClient *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SubmitScore((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloudConnectionClient_SubmitScore__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CloudConnectionClient *arg1 = (CloudConnectionClient *) 0 ;
  char *arg2 = (char *) 0 ;
  ULONG64 arg3 ;
  char *arg4 = (char *) 0 ;
  
  SWIG_check_num_args("SubmitScore",4,4)
  if(lua_isnil(L, 1)) SWIG_fail_arg("SubmitScore",1,"CloudConnectionClient *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SubmitScore",1,"CloudConnectionClient *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SubmitScore",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SubmitScore",3,"ULONG64");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("SubmitScore",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CloudConnectionClient,0))){
    SWIG_fail_ptr("CloudConnectionClient_SubmitScore",1,SWIGTYPE_p_CloudConnectionClient);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (ULONG64)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  
  if (VTraits::IsBaseOf<VTypedObject, CloudConnectionClient>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CloudConnectionClient_SubmitScore", 1, "CloudConnectionClient *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->SubmitScore((char const *)arg2,arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloudConnectionClient_SubmitScore(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CloudConnectionClient, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CloudConnectionClient_SubmitScore__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CloudConnectionClient, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_CloudConnectionClient_SubmitScore__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CloudConnectionClient_SubmitScore'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SubmitScore(CloudConnectionClient *,char const *,ULONG64)\n"
    "    SubmitScore(CloudConnectionClient *,char const *,ULONG64,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_CloudConnectionClient_ShowLeaderboard(lua_State* L) {
  int SWIG_arg = 0;
  CloudConnectionClient *arg1 = (CloudConnectionClient *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ShowLeaderboard",2,2)
  if(lua_isnil(L, 1)) SWIG_fail_arg("ShowLeaderboard",1,"CloudConnectionClient *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShowLeaderboard",1,"CloudConnectionClient *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ShowLeaderboard",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CloudConnectionClient,0))){
    SWIG_fail_ptr("CloudConnectionClient_ShowLeaderboard",1,SWIGTYPE_p_CloudConnectionClient);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (VTraits::IsBaseOf<VTypedObject, CloudConnectionClient>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CloudConnectionClient_ShowLeaderboard", 1, "CloudConnectionClient *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->ShowLeaderboard((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloudConnectionClient_ShowLeaderboards(lua_State* L) {
  int SWIG_arg = 0;
  CloudConnectionClient *arg1 = (CloudConnectionClient *) 0 ;
  
  SWIG_check_num_args("ShowLeaderboards",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("ShowLeaderboards",1,"CloudConnectionClient *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShowLeaderboards",1,"CloudConnectionClient *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CloudConnectionClient,0))){
    SWIG_fail_ptr("CloudConnectionClient_ShowLeaderboards",1,SWIGTYPE_p_CloudConnectionClient);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, CloudConnectionClient>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CloudConnectionClient_ShowLeaderboards", 1, "CloudConnectionClient *", "deleted native object");
    SWIG_fail;
  }
  
  (arg1)->ShowLeaderboards();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloudConnectionClient_Cast(lua_State* L) {
  int SWIG_arg = 0;
  unsigned long *arg1 = (unsigned long *) 0 ;
  CloudConnectionClient *result = 0 ;
  
  SWIG_check_num_args("CloudConnectionClient_Cast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CloudConnectionClient_Cast",1,"unsigned long *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_long,0))){
    SWIG_fail_ptr("CloudConnectionClient_Cast",1,SWIGTYPE_p_unsigned_long);
  }
  
  result = (CloudConnectionClient *)CloudConnectionClient_Cast(arg1);
  
  if(VTraits::IsBaseOf<VTypedObject, CloudConnectionClient>::value)
  {
    LUA_PushObjectProxy(L, (VTypedObject*)result); SWIG_arg++;
  }
  else
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CloudConnectionClient,0); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloudConnectionClient_AddScriptCallbackListener__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CloudConnectionClient *arg1 = (CloudConnectionClient *) 0 ;
  VCaptureSwigEnvironment *arg2 = (VCaptureSwigEnvironment *) 0 ;
  VCaptureSwigEnvironment temp2(L,SWIG_arg) ;
  
  {
    arg2 = &temp2;
  }
  SWIG_check_num_args("AddScriptCallbackListener",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("AddScriptCallbackListener",1,"CloudConnectionClient *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AddScriptCallbackListener",1,"CloudConnectionClient *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CloudConnectionClient,0))){
    SWIG_fail_ptr("CloudConnectionClient_AddScriptCallbackListener",1,SWIGTYPE_p_CloudConnectionClient);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, CloudConnectionClient>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CloudConnectionClient_AddScriptCallbackListener", 1, "CloudConnectionClient *", "deleted native object");
    SWIG_fail;
  }
  
  CloudConnectionClient_AddScriptCallbackListener__SWIG_1(arg1,arg2);
  
  {
    if(arg2->HasFailed())
    {
      lua_Debug ar;
      lua_getstack(L, 1, &ar);
      lua_getinfo(L, "nSl", &ar);
      lua_pushfstring(L,"Error (%s:%d) in %s, %s", ar.source, ar.currentline, "CloudConnectionClient_AddScriptCallbackListener", arg2->GetErrorMessage());
      SWIG_fail;
    }
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloudConnectionClient_AddScriptCallbackListener(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CloudConnectionClient, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CloudConnectionClient_AddScriptCallbackListener__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CloudConnectionClient, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_VScriptInstance, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CloudConnectionClient_AddScriptCallbackListener__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CloudConnectionClient_AddScriptCallbackListener'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddScriptCallbackListener(CloudConnectionClient *,VScriptInstance *)\n"
    "    AddScriptCallbackListener(CloudConnectionClient *,VCaptureSwigEnvironment *)\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_CloudConnectionClient_methods[] = {
    {"IsAuthenticated", _wrap_CloudConnectionClient_IsAuthenticated}, 
    {"SignOut", _wrap_CloudConnectionClient_SignOut}, 
    {"GetUserDisplayName", _wrap_CloudConnectionClient_GetUserDisplayName}, 
    {"BeginUserInitiatedSignIn", _wrap_CloudConnectionClient_BeginUserInitiatedSignIn}, 
    {"IsAuthInProgress", _wrap_CloudConnectionClient_IsAuthInProgress}, 
    {"GetAchievement", _wrap_CloudConnectionClient_GetAchievement}, 
    {"IncrementAchievement", _wrap_CloudConnectionClient_IncrementAchievement}, 
    {"RevealAchievement", _wrap_CloudConnectionClient_RevealAchievement}, 
    {"SetAchievementStepsAtLeast", _wrap_CloudConnectionClient_SetAchievementStepsAtLeast}, 
    {"UnlockAchievement", _wrap_CloudConnectionClient_UnlockAchievement}, 
    {"ShowAchievements", _wrap_CloudConnectionClient_ShowAchievements}, 
    {"SubmitScore", _wrap_CloudConnectionClient_SubmitScore}, 
    {"ShowLeaderboard", _wrap_CloudConnectionClient_ShowLeaderboard}, 
    {"ShowLeaderboards", _wrap_CloudConnectionClient_ShowLeaderboards}, 
    {"AddScriptCallbackListener", _wrap_CloudConnectionClient_AddScriptCallbackListener}, 
    {0,0}
};
static swig_lua_attribute swig_CloudConnectionClient_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CloudConnectionClient_bases[] = {0,0};
static const char *swig_CloudConnectionClient_base_names[] = {"VisTypedEngineObject_cl *",0};
static swig_lua_class _wrap_class_CloudConnectionClient = { "CloudConnectionClient", &SWIGTYPE_p_CloudConnectionClient,0,0, swig_CloudConnectionClient_methods, swig_CloudConnectionClient_attributes, swig_CloudConnectionClient_bases, swig_CloudConnectionClient_base_names };

static int _wrap_CloudConnection_GetClient(lua_State* L) {
  int SWIG_arg = 0;
  CloudConnection *arg1 = (CloudConnection *) 0 ;
  CloudConnectionClient *result = 0 ;
  
  SWIG_check_num_args("GetClient",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("GetClient",1,"CloudConnection *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GetClient",1,"CloudConnection *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CloudConnection,0))){
    SWIG_fail_ptr("CloudConnection_GetClient",1,SWIGTYPE_p_CloudConnection);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, CloudConnection>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CloudConnection_GetClient", 1, "CloudConnection *", "deleted native object");
    SWIG_fail;
  }
  
  result = (CloudConnectionClient *)(arg1)->GetClient();
  
  if(VTraits::IsBaseOf<VTypedObject, CloudConnectionClient>::value)
  {
    LUA_PushObjectProxy(L, (VTypedObject*)result); SWIG_arg++;
  }
  else
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CloudConnectionClient,0); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CloudConnection_Cast(lua_State* L) {
  int SWIG_arg = 0;
  unsigned long *arg1 = (unsigned long *) 0 ;
  CloudConnection *result = 0 ;
  
  SWIG_check_num_args("CloudConnection_Cast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CloudConnection_Cast",1,"unsigned long *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_long,0))){
    SWIG_fail_ptr("CloudConnection_Cast",1,SWIGTYPE_p_unsigned_long);
  }
  
  result = (CloudConnection *)CloudConnection_Cast(arg1);
  
  if(VTraits::IsBaseOf<VTypedObject, CloudConnection>::value)
  {
    LUA_PushObjectProxy(L, (VTypedObject*)result); SWIG_arg++;
  }
  else
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CloudConnection,0); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_CloudConnection_methods[] = {
    {"GetClient", _wrap_CloudConnection_GetClient}, 
    {0,0}
};
static swig_lua_attribute swig_CloudConnection_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CloudConnection_bases[] = {0,0};
static const char *swig_CloudConnection_base_names[] = {"VTypedObject *",0};
static swig_lua_class _wrap_class_CloudConnection = { "CloudConnection", &SWIGTYPE_p_CloudConnection,0,0, swig_CloudConnection_methods, swig_CloudConnection_attributes, swig_CloudConnection_bases, swig_CloudConnection_base_names };

static int _wrap_CCAchievement_Valid(lua_State* L) {
  int SWIG_arg = 0;
  CCAchievement *arg1 = (CCAchievement *) 0 ;
  bool result;
  
  SWIG_check_num_args("Valid",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("Valid",1,"CCAchievement const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Valid",1,"CCAchievement const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCAchievement,0))){
    SWIG_fail_ptr("CCAchievement_Valid",1,SWIGTYPE_p_CCAchievement);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, CCAchievement const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CCAchievement_Valid", 1, "CCAchievement const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (bool)((CCAchievement const *)arg1)->Valid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCAchievement_Id(lua_State* L) {
  int SWIG_arg = 0;
  CCAchievement *arg1 = (CCAchievement *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Id",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("Id",1,"CCAchievement const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Id",1,"CCAchievement const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCAchievement,0))){
    SWIG_fail_ptr("CCAchievement_Id",1,SWIGTYPE_p_CCAchievement);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, CCAchievement const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CCAchievement_Id", 1, "CCAchievement const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (char *)((CCAchievement const *)arg1)->Id();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCAchievement_Name(lua_State* L) {
  int SWIG_arg = 0;
  CCAchievement *arg1 = (CCAchievement *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Name",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("Name",1,"CCAchievement const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Name",1,"CCAchievement const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCAchievement,0))){
    SWIG_fail_ptr("CCAchievement_Name",1,SWIGTYPE_p_CCAchievement);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, CCAchievement const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CCAchievement_Name", 1, "CCAchievement const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (char *)((CCAchievement const *)arg1)->Name();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCAchievement_Description(lua_State* L) {
  int SWIG_arg = 0;
  CCAchievement *arg1 = (CCAchievement *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Description",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("Description",1,"CCAchievement const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Description",1,"CCAchievement const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCAchievement,0))){
    SWIG_fail_ptr("CCAchievement_Description",1,SWIGTYPE_p_CCAchievement);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, CCAchievement const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CCAchievement_Description", 1, "CCAchievement const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (char *)((CCAchievement const *)arg1)->Description();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCAchievement_Type(lua_State* L) {
  int SWIG_arg = 0;
  CCAchievement *arg1 = (CCAchievement *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Type",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("Type",1,"CCAchievement const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Type",1,"CCAchievement const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCAchievement,0))){
    SWIG_fail_ptr("CCAchievement_Type",1,SWIGTYPE_p_CCAchievement);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, CCAchievement const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CCAchievement_Type", 1, "CCAchievement const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (unsigned int)((CCAchievement const *)arg1)->Type();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCAchievement_State(lua_State* L) {
  int SWIG_arg = 0;
  CCAchievement *arg1 = (CCAchievement *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("State",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("State",1,"CCAchievement const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("State",1,"CCAchievement const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCAchievement,0))){
    SWIG_fail_ptr("CCAchievement_State",1,SWIGTYPE_p_CCAchievement);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, CCAchievement const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CCAchievement_State", 1, "CCAchievement const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (unsigned int)((CCAchievement const *)arg1)->State();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCAchievement_CurrentSteps(lua_State* L) {
  int SWIG_arg = 0;
  CCAchievement *arg1 = (CCAchievement *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("CurrentSteps",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("CurrentSteps",1,"CCAchievement const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CurrentSteps",1,"CCAchievement const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCAchievement,0))){
    SWIG_fail_ptr("CCAchievement_CurrentSteps",1,SWIGTYPE_p_CCAchievement);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, CCAchievement const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CCAchievement_CurrentSteps", 1, "CCAchievement const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (unsigned int)((CCAchievement const *)arg1)->CurrentSteps();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCAchievement_TotalSteps(lua_State* L) {
  int SWIG_arg = 0;
  CCAchievement *arg1 = (CCAchievement *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("TotalSteps",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("TotalSteps",1,"CCAchievement const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TotalSteps",1,"CCAchievement const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCAchievement,0))){
    SWIG_fail_ptr("CCAchievement_TotalSteps",1,SWIGTYPE_p_CCAchievement);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, CCAchievement const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CCAchievement_TotalSteps", 1, "CCAchievement const *", "deleted native object");
    SWIG_fail;
  }
  
  result = (unsigned int)((CCAchievement const *)arg1)->TotalSteps();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCAchievement_LastModified(lua_State* L) {
  int SWIG_arg = 0;
  CCAchievement *arg1 = (CCAchievement *) 0 ;
  ULONG64 result;
  
  SWIG_check_num_args("LastModified",1,1)
  if(lua_isnil(L, 1)) SWIG_fail_arg("LastModified",1,"CCAchievement const *");
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LastModified",1,"CCAchievement const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CCAchievement,0))){
    SWIG_fail_ptr("CCAchievement_LastModified",1,SWIGTYPE_p_CCAchievement);
  }
  
  
  if (VTraits::IsBaseOf<VTypedObject, CCAchievement const>::value && !arg1) {
    SWIG_push_fail_arg_info(L, "CCAchievement_LastModified", 1, "CCAchievement const *", "deleted native object");
    SWIG_fail;
  }
  
  result = ((CCAchievement const *)arg1)->LastModified();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CCAchievement_Cast(lua_State* L) {
  int SWIG_arg = 0;
  unsigned long *arg1 = (unsigned long *) 0 ;
  CCAchievement *result = 0 ;
  
  SWIG_check_num_args("CCAchievement_Cast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CCAchievement_Cast",1,"unsigned long *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_long,0))){
    SWIG_fail_ptr("CCAchievement_Cast",1,SWIGTYPE_p_unsigned_long);
  }
  
  result = (CCAchievement *)CCAchievement_Cast(arg1);
  
  if(VTraits::IsBaseOf<VTypedObject, CCAchievement>::value)
  {
    LUA_PushObjectProxy(L, (VTypedObject*)result); SWIG_arg++;
  }
  else
  {
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_CCAchievement,0); SWIG_arg++;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_CCAchievement_methods[] = {
    {"Valid", _wrap_CCAchievement_Valid}, 
    {"Id", _wrap_CCAchievement_Id}, 
    {"Name", _wrap_CCAchievement_Name}, 
    {"Description", _wrap_CCAchievement_Description}, 
    {"Type", _wrap_CCAchievement_Type}, 
    {"State", _wrap_CCAchievement_State}, 
    {"CurrentSteps", _wrap_CCAchievement_CurrentSteps}, 
    {"TotalSteps", _wrap_CCAchievement_TotalSteps}, 
    {"LastModified", _wrap_CCAchievement_LastModified}, 
    {0,0}
};
static swig_lua_attribute swig_CCAchievement_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CCAchievement_bases[] = {0,0};
static const char *swig_CCAchievement_base_names[] = {"VTypedObject *",0};
static swig_lua_class _wrap_class_CCAchievement = { "CCAchievement", &SWIGTYPE_p_CCAchievement,0,0, swig_CCAchievement_methods, swig_CCAchievement_attributes, swig_CCAchievement_bases, swig_CCAchievement_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "CloudConnectionClient_Cast", _wrap_CloudConnectionClient_Cast},
    { "CloudConnection_Cast", _wrap_CloudConnection_Cast},
    { "CCAchievement_Cast", _wrap_CCAchievement_Cast},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "V_RGBA_WHITE", _wrap_V_RGBA_WHITE_get, SWIG_Lua_set_immutable },
    { "V_RGBA_GREY", _wrap_V_RGBA_GREY_get, SWIG_Lua_set_immutable },
    { "V_RGBA_BLACK", _wrap_V_RGBA_BLACK_get, SWIG_Lua_set_immutable },
    { "V_RGBA_RED", _wrap_V_RGBA_RED_get, SWIG_Lua_set_immutable },
    { "V_RGBA_YELLOW", _wrap_V_RGBA_YELLOW_get, SWIG_Lua_set_immutable },
    { "V_RGBA_GREEN", _wrap_V_RGBA_GREEN_get, SWIG_Lua_set_immutable },
    { "V_RGBA_CYAN", _wrap_V_RGBA_CYAN_get, SWIG_Lua_set_immutable },
    { "V_RGBA_BLUE", _wrap_V_RGBA_BLUE_get, SWIG_Lua_set_immutable },
    { "V_RGBA_PURPLE", _wrap_V_RGBA_PURPLE_get, SWIG_Lua_set_immutable },
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_IVObjectComponentTo_p_VisTypedEngineObject_cl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VisTypedEngineObject_cl *)  ((IVObjectComponent *) x));
}
static void *_p_VisBaseEntity_clTo_p_VisTypedEngineObject_cl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VisTypedEngineObject_cl *) (VisObject3D_cl *) ((VisBaseEntity_cl *) x));
}
static void *_p_VisObject3D_clTo_p_VisTypedEngineObject_cl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VisTypedEngineObject_cl *)  ((VisObject3D_cl *) x));
}
static void *_p_CloudConnectionClientTo_p_VisTypedEngineObject_cl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VisTypedEngineObject_cl *)  ((CloudConnectionClient *) x));
}
static void *_p_VisBaseEntity_clTo_p_VisObject3D_cl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VisObject3D_cl *)  ((VisBaseEntity_cl *) x));
}
static void *_p_IVObjectComponentTo_p_VTypedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VTypedObject *) (VisTypedEngineObject_cl *) ((IVObjectComponent *) x));
}
static void *_p_VisBaseEntity_clTo_p_VTypedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VTypedObject *) (VisTypedEngineObject_cl *)(VisObject3D_cl *) ((VisBaseEntity_cl *) x));
}
static void *_p_VisObject3D_clTo_p_VTypedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VTypedObject *) (VisTypedEngineObject_cl *) ((VisObject3D_cl *) x));
}
static void *_p_VisTypedEngineObject_clTo_p_VTypedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VTypedObject *)  ((VisTypedEngineObject_cl *) x));
}
static void *_p_CloudConnectionClientTo_p_VTypedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VTypedObject *) (VisTypedEngineObject_cl *) ((CloudConnectionClient *) x));
}
static void *_p_CloudConnectionTo_p_VTypedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VTypedObject *)  ((CloudConnection *) x));
}
static void *_p_CCAchievementTo_p_VTypedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VTypedObject *)  ((CCAchievement *) x));
}
static void *_p_VisBaseEntity_clTo_p_VisObjectKey_cl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VisObjectKey_cl *) (VisObject3D_cl *) ((VisBaseEntity_cl *) x));
}
static void *_p_VisObject3D_clTo_p_VisObjectKey_cl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VisObjectKey_cl *)  ((VisObject3D_cl *) x));
}
static swig_type_info _swigt__p_CCAchievement = {"_p_CCAchievement", "CCAchievement *", 0, 0, (void*)&_wrap_class_CCAchievement, 0, NULL};
static swig_type_info _swigt__p_CloudConnection = {"_p_CloudConnection", "CloudConnection *", 0, 0, (void*)&_wrap_class_CloudConnection, 0, NULL};
static swig_type_info _swigt__p_CloudConnectionClient = {"_p_CloudConnectionClient", "CloudConnectionClient *", 0, 0, (void*)&_wrap_class_CloudConnectionClient, 0, NULL};
static swig_type_info _swigt__p_IVObjectComponent = {"_p_IVObjectComponent", "IVObjectComponent *", 0, 0, (void*)&_wrap_class_IVObjectComponent, 0, NULL};
static swig_type_info _swigt__p_VBitmask = {"_p_VBitmask", "VBitmask *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_VCaptureSwigEnvironment = {"_p_VCaptureSwigEnvironment", "VCaptureSwigEnvironment *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_VColorRef = {"_p_VColorRef", "VColorRef *", 0, 0, (void*)&_wrap_class_VColorRef, 0, NULL};
static swig_type_info _swigt__p_VDynamicMesh = {"_p_VDynamicMesh", "VDynamicMesh *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_VMapT_VString_VString_t = {"_p_VMapT_VString_VString_t", "VMap< VString,VString > *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_VScriptInstance = {"_p_VScriptInstance", "VScriptInstance *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_VTextureObject = {"_p_VTextureObject", "VTextureObject *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_VTypedObject = {"_p_VTypedObject", "VTypedObject *", 0, 0, (void*)&_wrap_class_VTypedObject, 0, NULL};
static swig_type_info _swigt__p_VisBaseEntity_cl = {"_p_VisBaseEntity_cl", "VisBaseEntity_cl *", 0, 0, (void*)&_wrap_class_VisBaseEntity_cl, 0, NULL};
static swig_type_info _swigt__p_VisObject3D_cl = {"_p_VisObject3D_cl", "VisObject3D_cl *", 0, 0, (void*)&_wrap_class_VisObject3D_cl, 0, NULL};
static swig_type_info _swigt__p_VisObjectKey_cl = {"_p_VisObjectKey_cl", "VisObjectKey_cl *", 0, 0, (void*)&_wrap_class_VisObjectKey_cl, 0, NULL};
static swig_type_info _swigt__p_VisSurface_cl = {"_p_VisSurface_cl", "VisSurface_cl *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_VisTypedEngineObject_cl = {"_p_VisTypedEngineObject_cl", "VisTypedEngineObject_cl *", 0, 0, (void*)&_wrap_class_VisTypedEngineObject_cl, 0, NULL};
static swig_type_info _swigt__p___int64 = {"_p___int64", "__int64 *|LONGLONG *|LONG64 *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_char = {"_p_char", "CHAR *|TCHAR *|char *|CCHAR *|SBYTE *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_float = {"_p_float", "FLOAT *|float *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_hkvAlignedBBox = {"_p_hkvAlignedBBox", "hkvAlignedBBox *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_hkvBoundingSphere = {"_p_hkvBoundingSphere", "hkvBoundingSphere *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_hkvMat3 = {"_p_hkvMat3", "hkvMat3 *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_hkvMat4 = {"_p_hkvMat4", "hkvMat4 *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_hkvPlane = {"_p_hkvPlane", "hkvPlane *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_hkvQuat = {"_p_hkvQuat", "hkvQuat *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_hkvVec2 = {"_p_hkvVec2", "hkvVec2 *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_hkvVec3 = {"_p_hkvVec3", "hkvVec3 *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_hkvVec4 = {"_p_hkvVec4", "hkvVec4 *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_int = {"_p_int", "BOOL *|INT32 *|VBool *|int *|INT *|INT_PTR *|LONG32 *|SINT *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_long = {"_p_long", "SHANDLE_PTR *|LONG_PTR *|LONG *|HRESULT *|RETVAL *|long *|SLONG *|SSIZE_T *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "PTCH *|PCTSTR *|LPCTSTR *|LPTCH *|PUTSTR *|LPUTSTR *|PCUTSTR *|LPCUTSTR *|char **|PTSTR *|LPTSTR *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_p_unsigned_long = {"_p_p_unsigned_long", "unsigned long **|PLCID *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_short = {"_p_short", "HALF_PTR *|short *|SHORT *|SSHORT *|INT16 *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_signed___int64 = {"_p_signed___int64", "INT64 *|signed __int64 *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|INT8 *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_unsigned___int64 = {"_p_unsigned___int64", "UINT64 *|DWORD64 *|unsigned __int64 *|DWORDLONG *|ULONGLONG *|ULONG64 *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "FCHAR *|unsigned char *|UCHAR *|BYTE *|TBYTE *|UINT8 *|UBYTE *|BOOLEAN *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "UINT32 *|DWORD32 *|UINT *|unsigned int *|UINT_PTR *|ULONG32 *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "HANDLE_PTR *|DWORD *|ULONG_PTR *|DWORD_PTR *|FLONG *|unsigned long *|ULONG *|SIZE_T *|LCID *", 0, 0, (void*)0, 0, NULL};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "WORD *|UHALF_PTR *|unsigned short *|USHORT *|FSHORT *|LANGID *|UINT16 *", 0, 0, (void*)0, 0, NULL};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CCAchievement,
  &_swigt__p_CloudConnection,
  &_swigt__p_CloudConnectionClient,
  &_swigt__p_IVObjectComponent,
  &_swigt__p_VBitmask,
  &_swigt__p_VCaptureSwigEnvironment,
  &_swigt__p_VColorRef,
  &_swigt__p_VDynamicMesh,
  &_swigt__p_VMapT_VString_VString_t,
  &_swigt__p_VScriptInstance,
  &_swigt__p_VTextureObject,
  &_swigt__p_VTypedObject,
  &_swigt__p_VisBaseEntity_cl,
  &_swigt__p_VisObject3D_cl,
  &_swigt__p_VisObjectKey_cl,
  &_swigt__p_VisSurface_cl,
  &_swigt__p_VisTypedEngineObject_cl,
  &_swigt__p___int64,
  &_swigt__p_char,
  &_swigt__p_float,
  &_swigt__p_hkvAlignedBBox,
  &_swigt__p_hkvBoundingSphere,
  &_swigt__p_hkvMat3,
  &_swigt__p_hkvMat4,
  &_swigt__p_hkvPlane,
  &_swigt__p_hkvQuat,
  &_swigt__p_hkvVec2,
  &_swigt__p_hkvVec3,
  &_swigt__p_hkvVec4,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_p_char,
  &_swigt__p_p_unsigned_long,
  &_swigt__p_short,
  &_swigt__p_signed___int64,
  &_swigt__p_signed_char,
  &_swigt__p_unsigned___int64,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_CCAchievement[] = {  {&_swigt__p_CCAchievement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CloudConnection[] = {  {&_swigt__p_CloudConnection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CloudConnectionClient[] = {  {&_swigt__p_CloudConnectionClient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IVObjectComponent[] = {  {&_swigt__p_IVObjectComponent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VBitmask[] = {  {&_swigt__p_VBitmask, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VCaptureSwigEnvironment[] = {  {&_swigt__p_VCaptureSwigEnvironment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VColorRef[] = {  {&_swigt__p_VColorRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VDynamicMesh[] = {  {&_swigt__p_VDynamicMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VMapT_VString_VString_t[] = {  {&_swigt__p_VMapT_VString_VString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VScriptInstance[] = {  {&_swigt__p_VScriptInstance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VTextureObject[] = {  {&_swigt__p_VTextureObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VTypedObject[] = {  {&_swigt__p_IVObjectComponent, _p_IVObjectComponentTo_p_VTypedObject, 0, 0},  {&_swigt__p_VTypedObject, 0, 0, 0},  {&_swigt__p_VisBaseEntity_cl, _p_VisBaseEntity_clTo_p_VTypedObject, 0, 0},  {&_swigt__p_VisObject3D_cl, _p_VisObject3D_clTo_p_VTypedObject, 0, 0},  {&_swigt__p_VisTypedEngineObject_cl, _p_VisTypedEngineObject_clTo_p_VTypedObject, 0, 0},  {&_swigt__p_CloudConnectionClient, _p_CloudConnectionClientTo_p_VTypedObject, 0, 0},  {&_swigt__p_CloudConnection, _p_CloudConnectionTo_p_VTypedObject, 0, 0},  {&_swigt__p_CCAchievement, _p_CCAchievementTo_p_VTypedObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VisBaseEntity_cl[] = {  {&_swigt__p_VisBaseEntity_cl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VisObject3D_cl[] = {  {&_swigt__p_VisBaseEntity_cl, _p_VisBaseEntity_clTo_p_VisObject3D_cl, 0, 0},  {&_swigt__p_VisObject3D_cl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VisObjectKey_cl[] = {  {&_swigt__p_VisObjectKey_cl, 0, 0, 0},  {&_swigt__p_VisBaseEntity_cl, _p_VisBaseEntity_clTo_p_VisObjectKey_cl, 0, 0},  {&_swigt__p_VisObject3D_cl, _p_VisObject3D_clTo_p_VisObjectKey_cl, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VisSurface_cl[] = {  {&_swigt__p_VisSurface_cl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VisTypedEngineObject_cl[] = {  {&_swigt__p_IVObjectComponent, _p_IVObjectComponentTo_p_VisTypedEngineObject_cl, 0, 0},  {&_swigt__p_VisBaseEntity_cl, _p_VisBaseEntity_clTo_p_VisTypedEngineObject_cl, 0, 0},  {&_swigt__p_VisObject3D_cl, _p_VisObject3D_clTo_p_VisTypedEngineObject_cl, 0, 0},  {&_swigt__p_VisTypedEngineObject_cl, 0, 0, 0},  {&_swigt__p_CloudConnectionClient, _p_CloudConnectionClientTo_p_VisTypedEngineObject_cl, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p___int64[] = {  {&_swigt__p___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hkvAlignedBBox[] = {  {&_swigt__p_hkvAlignedBBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hkvBoundingSphere[] = {  {&_swigt__p_hkvBoundingSphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hkvMat3[] = {  {&_swigt__p_hkvMat3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hkvMat4[] = {  {&_swigt__p_hkvMat4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hkvPlane[] = {  {&_swigt__p_hkvPlane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hkvQuat[] = {  {&_swigt__p_hkvQuat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hkvVec2[] = {  {&_swigt__p_hkvVec2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hkvVec3[] = {  {&_swigt__p_hkvVec3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hkvVec4[] = {  {&_swigt__p_hkvVec4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_long[] = {  {&_swigt__p_p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed___int64[] = {  {&_swigt__p_signed___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned___int64[] = {  {&_swigt__p_unsigned___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CCAchievement,
  _swigc__p_CloudConnection,
  _swigc__p_CloudConnectionClient,
  _swigc__p_IVObjectComponent,
  _swigc__p_VBitmask,
  _swigc__p_VCaptureSwigEnvironment,
  _swigc__p_VColorRef,
  _swigc__p_VDynamicMesh,
  _swigc__p_VMapT_VString_VString_t,
  _swigc__p_VScriptInstance,
  _swigc__p_VTextureObject,
  _swigc__p_VTypedObject,
  _swigc__p_VisBaseEntity_cl,
  _swigc__p_VisObject3D_cl,
  _swigc__p_VisObjectKey_cl,
  _swigc__p_VisSurface_cl,
  _swigc__p_VisTypedEngineObject_cl,
  _swigc__p___int64,
  _swigc__p_char,
  _swigc__p_float,
  _swigc__p_hkvAlignedBBox,
  _swigc__p_hkvBoundingSphere,
  _swigc__p_hkvMat3,
  _swigc__p_hkvMat4,
  _swigc__p_hkvPlane,
  _swigc__p_hkvQuat,
  _swigc__p_hkvVec2,
  _swigc__p_hkvVec3,
  _swigc__p_hkvVec4,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_p_char,
  _swigc__p_p_unsigned_long,
  _swigc__p_short,
  _swigc__p_signed___int64,
  _swigc__p_signed_char,
  _swigc__p_unsigned___int64,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

template<typename T, bool IsTypedObject = VTraits::IsBaseOf<VTypedObject, typename VTraits::RemovePointer<T>::type>::value> struct SWIG_InitVisionType { static void Do(swig_type_info*) {} };
template<typename T> struct SWIG_InitVisionType<T*, true> { static void Do(swig_type_info* info) {
            VType* pType = VTraits::RemovePointer<T>::type::GetClassTypeId();
            if(pType->m_pSwigTypeInfo == NULL)
              pType->m_pSwigTypeInfo = info;
            info->visiontype = pType;
  } };
SWIGRUNTIME void SWIG_InitVisionTypes() {
  SWIG_InitVisionType<CCAchievement *>::Do(&_swigt__p_CCAchievement);
  SWIG_InitVisionType<CloudConnection *>::Do(&_swigt__p_CloudConnection);
  SWIG_InitVisionType<CloudConnectionClient *>::Do(&_swigt__p_CloudConnectionClient);
  SWIG_InitVisionType<IVObjectComponent *>::Do(&_swigt__p_IVObjectComponent);
  SWIG_InitVisionType<VBitmask *>::Do(&_swigt__p_VBitmask);
  SWIG_InitVisionType<VCaptureSwigEnvironment *>::Do(&_swigt__p_VCaptureSwigEnvironment);
  SWIG_InitVisionType<VColorRef *>::Do(&_swigt__p_VColorRef);
  SWIG_InitVisionType<VDynamicMesh *>::Do(&_swigt__p_VDynamicMesh);
  SWIG_InitVisionType<VMap< VString,VString > *>::Do(&_swigt__p_VMapT_VString_VString_t);
  SWIG_InitVisionType<VScriptInstance *>::Do(&_swigt__p_VScriptInstance);
  SWIG_InitVisionType<VTextureObject *>::Do(&_swigt__p_VTextureObject);
  SWIG_InitVisionType<VTypedObject *>::Do(&_swigt__p_VTypedObject);
  SWIG_InitVisionType<VisBaseEntity_cl *>::Do(&_swigt__p_VisBaseEntity_cl);
  SWIG_InitVisionType<VisObject3D_cl *>::Do(&_swigt__p_VisObject3D_cl);
  SWIG_InitVisionType<VisObjectKey_cl *>::Do(&_swigt__p_VisObjectKey_cl);
  SWIG_InitVisionType<VisSurface_cl *>::Do(&_swigt__p_VisSurface_cl);
  SWIG_InitVisionType<VisTypedEngineObject_cl *>::Do(&_swigt__p_VisTypedEngineObject_cl);
  SWIG_InitVisionType<hkvAlignedBBox *>::Do(&_swigt__p_hkvAlignedBBox);
  SWIG_InitVisionType<hkvBoundingSphere *>::Do(&_swigt__p_hkvBoundingSphere);
  SWIG_InitVisionType<hkvMat3 *>::Do(&_swigt__p_hkvMat3);
  SWIG_InitVisionType<hkvMat4 *>::Do(&_swigt__p_hkvMat4);
  SWIG_InitVisionType<hkvPlane *>::Do(&_swigt__p_hkvPlane);
  SWIG_InitVisionType<hkvQuat *>::Do(&_swigt__p_hkvQuat);
  SWIG_InitVisionType<hkvVec2 *>::Do(&_swigt__p_hkvVec2);
  SWIG_InitVisionType<hkvVec3 *>::Do(&_swigt__p_hkvVec3);
  SWIG_InitVisionType<hkvVec4 *>::Do(&_swigt__p_hkvVec4);
}

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
  
  // Vision extension
  SWIG_InitVisionTypes();
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/

SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;

  ////////////////////////////////////////////
  //           Vision Extension             //
 
  if(strcmp(SWIG_name, "Vision")!=0)
  {
    swig_module_info *module_head = SWIG_GetModule((void *)L); //the module head is always the VisionLuaModule
   
    if(module_head!=0)
    {
      swig_module_info *iter=module_head;
      do {
        if (iter==&swig_module) {
          return 1; //the module has been loaded, no need to do anything
        }
        iter=iter->next;
      }while (iter!= module_head);
    }
  }
  
	static bool hasSavedClientData = false;
	const int numTypes = sizeof(swig_type_initial) / sizeof(swig_type_info*);
	static swig_type_info* savedClientData[numTypes];
	if ( !hasSavedClientData )
	{
		// Save client data so we can restore it
		hasSavedClientData = true;
		for (int k = 0; k < numTypes; k++)
		{
      if(swig_type_initial[k]!=0)
			  savedClientData[k] = (swig_type_info*)swig_type_initial[k]->clientdata;
      else
        savedClientData[k] = 0;
		}
	}
	else
	{
		// Restore saved client data
		for (int k = 0; k < numTypes; k++)
		{
			if(swig_type_initial[k]!=0)
			{	
				swig_type_initial[k]->clientdata = savedClientData[k];
			}
		}
	}
  
  swig_module.next = 0;

  for (i = 0; i < numTypes; i++)
  {
    if(swig_type_initial[i]!=0)
    {
      swig_type_initial[i]->cast = 0;
      swig_type_initial[i]->dcast = 0;
    }
      
    if(swig_cast_initial[i]!=0)
    {
      for (int castIndex  = 0; swig_cast_initial[i][castIndex].type!=0; castIndex++)
      {
        //reset initial values
        swig_cast_initial[i][castIndex].next = 0;
        swig_cast_initial[i][castIndex].prev = 0;
      }
    }
 
    swig_module.types[i] = 0;
  }

  //            End of Extension            //
  ////////////////////////////////////////////

  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  SWIG_Lua_add_function(L,"swig_isalive", SWIG_Lua_isalive);  // Vision extension
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}


#if defined (__SNC__)
#pragma diag_pop
#pragma diag_pop
#pragma diag_pop
#endif

#if defined(__ghs__)
#pragma ghs endnowarning
#endif

#endif // _VISION_DOC
